import React, { useState, useEffect } from "react";
import {
  Box,
  Typography,
  Grid,
  Card,
  CardContent,
  List,
  ListItem,
  ListItemText,
  Chip,
  LinearProgress,
  Button,
  CircularProgress,
  Alert,
  useTheme,
  alpha,
} from "@mui/material";
import {
  BugReport as BugReportIcon,
  Refresh as RefreshIcon,
  ArrowForward as ArrowForwardIcon,
  CalendarToday as CalendarIcon,
  RssFeed as RssFeedIcon,
  Security as SecurityIcon,
} from "@mui/icons-material";
import { DashboardWidget } from "../../../services/dashboard/dashboardService";
import useAuth from "../../../features/auth/hooks/useAuth";
import axios from "axios";
import { TOKEN_KEY } from "../../../config/constants";

interface VulnerabilityManagementWidgetProps {
  data: any;
  widget: DashboardWidget;
}

// Vulnerability Risk Level enum
enum VulnerabilityRiskLevel {
  CRITICAL = "critical",
  HIGH = "high",
  MEDIUM = "medium",
  LOW = "low",
}

// Vulnerability Status enum
enum VulnerabilityStatus {
  OPEN = "open",
  IN_REVIEW = "in_review",
  ACCEPTED_RISK = "accepted_risk",
  IN_REMEDIATION = "in_remediation",
  REMEDIATED = "remediated",
  CLOSED = "closed",
}

// Vulnerability interface
interface Vulnerability {
  id: string;
  title: string;
  cveId?: string;
  description: string;
  riskLevel: VulnerabilityRiskLevel;
  status: VulnerabilityStatus;
  discoveredDate: string;
  lastUpdated: string;
  affectedAssets: number;
  remediationAvailable: boolean;
  exploitAvailable: boolean;
  cvssScore?: number;
  remedyDescription?: string;
}

// Vulnerability summary data interface
interface VulnerabilityData {
  totalVulnerabilities: number;
  criticalCount: number;
  highCount: number;
  mediumCount: number;
  lowCount: number;
  remediationProgress: number;
  newVulnerabilities30Days: number;
  lastUpdated: string;
  topVulnerabilities: Vulnerability[];
}

/**
 * VulnerabilityManagementWidget Component
 *
 * Displays vulnerability management metrics, statistics and recent critical vulnerabilities
 */
const VulnerabilityManagementWidget: React.FC<
  VulnerabilityManagementWidgetProps
> = ({ data, widget }) => {
  const theme = useTheme();
  const { isAuthenticated } = useAuth();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [vulnerabilityStats, setVulnerabilityStats] = useState({
    totalVulnerabilities: 0,
    criticalCount: 0,
    highCount: 0,
    mediumCount: 0,
    lowCount: 0,
    remediationProgress: 0,
    newVulnerabilities30Days: 0,
  });
  const [topVulnerabilities, setTopVulnerabilities] = useState<Vulnerability[]>(
    []
  );

  // Mock data as fallback
  const mockData: VulnerabilityData = {
    totalVulnerabilities: 243,
    criticalCount: 12,
    highCount: 37,
    mediumCount: 94,
    lowCount: 100,
    remediationProgress: 67,
    newVulnerabilities30Days: 28,
    lastUpdated: new Date().toISOString(),
    topVulnerabilities: [
      {
        id: "vuln-001",
        title: "Apache Log4j Remote Code Execution",
        cveId: "CVE-2021-44228",
        description: "A remote code execution vulnerability in Apache Log4j",
        riskLevel: VulnerabilityRiskLevel.CRITICAL,
        status: VulnerabilityStatus.IN_REMEDIATION,
        discoveredDate: new Date(
          Date.now() - 15 * 24 * 60 * 60 * 1000
        ).toISOString(),
        lastUpdated: new Date(
          Date.now() - 2 * 24 * 60 * 60 * 1000
        ).toISOString(),
        affectedAssets: 24,
        remediationAvailable: true,
        exploitAvailable: true,
        cvssScore: 10.0,
        remedyDescription: "Upgrade to Log4j 2.15.0 or later",
      },
      {
        id: "vuln-002",
        title: "Windows Print Spooler Remote Code Execution",
        cveId: "CVE-2021-34527",
        description:
          "PrintNightmare - A remote code execution vulnerability in Windows Print Spooler",
        riskLevel: VulnerabilityRiskLevel.CRITICAL,
        status: VulnerabilityStatus.IN_REVIEW,
        discoveredDate: new Date(
          Date.now() - 45 * 24 * 60 * 60 * 1000
        ).toISOString(),
        lastUpdated: new Date(
          Date.now() - 5 * 24 * 60 * 60 * 1000
        ).toISOString(),
        affectedAssets: 38,
        remediationAvailable: true,
        exploitAvailable: true,
        cvssScore: 8.8,
        remedyDescription: "Apply Microsoft security patch KB5004945",
      },
      {
        id: "vuln-003",
        title: "OpenSSL TLS Heartbeat Information Disclosure",
        cveId: "CVE-2014-0160",
        description:
          "Heartbleed vulnerability that allows attackers to read protected memory",
        riskLevel: VulnerabilityRiskLevel.HIGH,
        status: VulnerabilityStatus.REMEDIATED,
        discoveredDate: new Date(
          Date.now() - 90 * 24 * 60 * 60 * 1000
        ).toISOString(),
        lastUpdated: new Date(
          Date.now() - 60 * 24 * 60 * 60 * 1000
        ).toISOString(),
        affectedAssets: 15,
        remediationAvailable: true,
        exploitAvailable: true,
        cvssScore: 7.5,
        remedyDescription: "Update OpenSSL to version 1.0.1g or later",
      },
      {
        id: "vuln-004",
        title: "SQL Injection in Internal Web Application",
        cveId: undefined,
        description:
          "SQL injection vulnerability in login form allows unauthorized database access",
        riskLevel: VulnerabilityRiskLevel.HIGH,
        status: VulnerabilityStatus.OPEN,
        discoveredDate: new Date(
          Date.now() - 10 * 24 * 60 * 60 * 1000
        ).toISOString(),
        lastUpdated: new Date(
          Date.now() - 3 * 24 * 60 * 60 * 1000
        ).toISOString(),
        affectedAssets: 1,
        remediationAvailable: true,
        exploitAvailable: false,
        cvssScore: 7.2,
        remedyDescription: "Implement prepared statements and input validation",
      },
    ],
  };

  // Fetch vulnerability data when authenticated
  useEffect(() => {
    if (isAuthenticated) {
      fetchVulnerabilityData();
    }
  }, [isAuthenticated]);

  // Fetch vulnerability data from API
  const fetchVulnerabilityData = async () => {
    setLoading(true);
    setError(null);

    try {
      const token = localStorage.getItem(TOKEN_KEY);

      if (!token) {
        setError("Authentication token not found");
        setLoading(false);
        return;
      }

      // API endpoint for vulnerability data
      const response = await axios.get(
        `${
          process.env.REACT_APP_API_URL || "http://localhost:3001"
        }/api/vulnerabilities/dashboard`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      // Update state with fetched data
      if (response.data && response.data.data) {
        const vulnData = response.data.data;
        setVulnerabilityStats({
          totalVulnerabilities: vulnData.totalVulnerabilities || 0,
          criticalCount: vulnData.criticalCount || 0,
          highCount: vulnData.highCount || 0,
          mediumCount: vulnData.mediumCount || 0,
          lowCount: vulnData.lowCount || 0,
          remediationProgress: vulnData.remediationProgress || 0,
          newVulnerabilities30Days: vulnData.newVulnerabilities30Days || 0,
        });
        setTopVulnerabilities(vulnData.topVulnerabilities || []);
      }
    } catch (err) {
      console.error("Error fetching vulnerability data:", err);
      setError("Failed to load vulnerability data. Please try again later.");

      // Fall back to mock data in case of error
      setTopVulnerabilities(mockData.topVulnerabilities);
      setVulnerabilityStats({
        totalVulnerabilities: mockData.totalVulnerabilities,
        criticalCount: mockData.criticalCount,
        highCount: mockData.highCount,
        mediumCount: mockData.mediumCount,
        lowCount: mockData.lowCount,
        remediationProgress: mockData.remediationProgress,
        newVulnerabilities30Days: mockData.newVulnerabilities30Days,
      });
    } finally {
      setLoading(false);
    }
  };

  // Get risk level color based on vulnerability risk level
  const getRiskLevelColor = (riskLevel: VulnerabilityRiskLevel) => {
    switch (riskLevel) {
      case VulnerabilityRiskLevel.CRITICAL:
        return theme.palette.error.main;
      case VulnerabilityRiskLevel.HIGH:
        return theme.palette.warning.dark;
      case VulnerabilityRiskLevel.MEDIUM:
        return theme.palette.warning.main;
      case VulnerabilityRiskLevel.LOW:
        return theme.palette.info.main;
      default:
        return theme.palette.grey[500];
    }
  };

  // Get status color based on vulnerability status
  const getStatusColor = (status: VulnerabilityStatus) => {
    switch (status) {
      case VulnerabilityStatus.OPEN:
        return theme.palette.error.light;
      case VulnerabilityStatus.IN_REVIEW:
        return theme.palette.info.main;
      case VulnerabilityStatus.ACCEPTED_RISK:
        return theme.palette.warning.light;
      case VulnerabilityStatus.IN_REMEDIATION:
        return theme.palette.warning.main;
      case VulnerabilityStatus.REMEDIATED:
        return theme.palette.success.main;
      case VulnerabilityStatus.CLOSED:
        return theme.palette.success.dark;
      default:
        return theme.palette.grey[500];
    }
  };

  // Format date
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return new Intl.DateTimeFormat("en-US", {
      month: "short",
      day: "numeric",
      year: "numeric",
    }).format(date);
  };

  // Real-time data refresh - poll every 5 minutes
  useEffect(() => {
    if (!isAuthenticated) return;

    const interval = setInterval(() => {
      fetchVulnerabilityData();
    }, 300000); // 5 minutes

    return () => clearInterval(interval);
  }, [isAuthenticated]);

  // Use provided data, fetched data, or fallback to mock data
  const vulnerabilityData = data?.vulnerabilityData || {
    totalVulnerabilities:
      vulnerabilityStats.totalVulnerabilities || mockData.totalVulnerabilities,
    criticalCount: vulnerabilityStats.criticalCount || mockData.criticalCount,
    highCount: vulnerabilityStats.highCount || mockData.highCount,
    mediumCount: vulnerabilityStats.mediumCount || mockData.mediumCount,
    lowCount: vulnerabilityStats.lowCount || mockData.lowCount,
    remediationProgress:
      vulnerabilityStats.remediationProgress || mockData.remediationProgress,
    newVulnerabilities30Days:
      vulnerabilityStats.newVulnerabilities30Days ||
      mockData.newVulnerabilities30Days,
    lastUpdated: new Date().toISOString(),
    topVulnerabilities:
      topVulnerabilities.length > 0
        ? topVulnerabilities
        : mockData.topVulnerabilities,
  };

  // Handle manual refresh
  const handleRefresh = () => {
    if (isAuthenticated) {
      fetchVulnerabilityData();
    }
  };

  // Handle loading state
  if (loading) {
    return (
      <Box
        sx={{
          height: "100%",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          p: 2,
        }}
      >
        <CircularProgress size={40} />
      </Box>
    );
  }

  return (
    <Box
      sx={{
        height: "100%",
        display: "flex",
        flexDirection: "column",
        p: 2,
      }}
    >
      {/* Show error if any */}
      {error && (
        <Alert severity="error" sx={{ mb: 2 }}>
          {error}
        </Alert>
      )}

      {/* Widget Header */}
      <Box
        sx={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          mb: 2,
        }}
      >
        <Box sx={{ display: "flex", alignItems: "center" }}>
          <BugReportIcon sx={{ color: theme.palette.primary.main, mr: 1 }} />
          <Typography variant="h6">Vulnerability Management</Typography>
        </Box>
        <Button
          size="small"
          startIcon={<RefreshIcon />}
          onClick={handleRefresh}
          disabled={loading}
        >
          Refresh
        </Button>
      </Box>

      {/* Stats Cards */}
      <Grid container spacing={2} sx={{ mb: 2 }}>
        <Grid item xs={3}>
          <Card sx={{ bgcolor: alpha(theme.palette.primary.main, 0.1) }}>
            <CardContent sx={{ p: 1.5, "&:last-child": { pb: 1.5 } }}>
              <Typography variant="subtitle2" color="text.secondary">
                Total
              </Typography>
              <Typography variant="h5">
                {vulnerabilityData.totalVulnerabilities}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={2}>
          <Card sx={{ bgcolor: alpha(theme.palette.error.main, 0.1) }}>
            <CardContent sx={{ p: 1.5, "&:last-child": { pb: 1.5 } }}>
              <Typography variant="subtitle2" color="text.secondary">
                Critical
              </Typography>
              <Typography variant="h5" color="error">
                {vulnerabilityData.criticalCount}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={2}>
          <Card sx={{ bgcolor: alpha(theme.palette.warning.dark, 0.1) }}>
            <CardContent sx={{ p: 1.5, "&:last-child": { pb: 1.5 } }}>
              <Typography variant="subtitle2" color="text.secondary">
                High
              </Typography>
              <Typography variant="h5" color="warning.dark">
                {vulnerabilityData.highCount}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={2}>
          <Card sx={{ bgcolor: alpha(theme.palette.info.main, 0.1) }}>
            <CardContent sx={{ p: 1.5, "&:last-child": { pb: 1.5 } }}>
              <Typography variant="subtitle2" color="text.secondary">
                Last 30d
              </Typography>
              <Typography variant="h5" color="info.main">
                {vulnerabilityData.newVulnerabilities30Days}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={3}>
          <Card>
            <CardContent sx={{ p: 1.5, "&:last-child": { pb: 1.5 } }}>
              <Box sx={{ display: "flex", justifyContent: "space-between" }}>
                <Typography variant="subtitle2" color="text.secondary">
                  Remediation
                </Typography>
                <Typography variant="subtitle2" color="primary">
                  {vulnerabilityData.remediationProgress}%
                </Typography>
              </Box>
              <LinearProgress
                variant="determinate"
                value={vulnerabilityData.remediationProgress}
                sx={{ mt: 1, height: 8, borderRadius: 4 }}
              />
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Top Vulnerabilities Section */}
      <Typography variant="subtitle1" sx={{ mb: 1 }}>
        Top Vulnerabilities
      </Typography>
      <Box sx={{ flex: 1, overflowY: "auto" }}>
        <List disablePadding>
          {vulnerabilityData.topVulnerabilities.map((vuln, index) => (
            <ListItem
              key={vuln.id}
              sx={{
                py: 1,
                px: 2,
                borderLeft: `4px solid ${getRiskLevelColor(vuln.riskLevel)}`,
                bgcolor: alpha(getRiskLevelColor(vuln.riskLevel), 0.05),
                mb: 1,
                borderRadius: "4px",
              }}
            >
              <ListItemText
                primary={
                  <Box
                    sx={{
                      display: "flex",
                      alignItems: "baseline",
                      flexWrap: "wrap",
                    }}
                  >
                    <Typography
                      variant="body2"
                      fontWeight="medium"
                      sx={{ mr: 1 }}
                    >
                      {vuln.title}
                    </Typography>
                    {vuln.cveId && (
                      <Chip
                        size="small"
                        label={vuln.cveId}
                        sx={{
                          height: 20,
                          fontSize: "0.65rem",
                          bgcolor: alpha(theme.palette.primary.main, 0.1),
                          color: theme.palette.primary.main,
                          mr: 0.5,
                        }}
                      />
                    )}
                    {vuln.cvssScore && (
                      <Chip
                        size="small"
                        label={`CVSS: ${vuln.cvssScore.toFixed(1)}`}
                        sx={{
                          height: 20,
                          fontSize: "0.65rem",
                          bgcolor: alpha(
                            getRiskLevelColor(vuln.riskLevel),
                            0.1
                          ),
                          color: getRiskLevelColor(vuln.riskLevel),
                        }}
                      />
                    )}
                  </Box>
                }
                secondary={
                  <Box>
                    <Typography variant="caption" color="text.secondary">
                      {vuln.description}
                    </Typography>
                    <Box
                      sx={{
                        display: "flex",
                        alignItems: "center",
                        mt: 0.5,
                        flexWrap: "wrap",
                        gap: 0.5,
                      }}
                    >
                      <Chip
                        size="small"
                        label={vuln.riskLevel}
                        sx={{
                          height: 20,
                          fontSize: "0.65rem",
                          bgcolor: alpha(
                            getRiskLevelColor(vuln.riskLevel),
                            0.1
                          ),
                          color: getRiskLevelColor(vuln.riskLevel),
                          textTransform: "uppercase",
                        }}
                      />
                      <Chip
                        size="small"
                        label={vuln.status.replace("_", " ")}
                        sx={{
                          height: 20,
                          fontSize: "0.65rem",
                          bgcolor: alpha(getStatusColor(vuln.status), 0.1),
                          color: getStatusColor(vuln.status),
                          textTransform: "capitalize",
                        }}
                      />
                      <Chip
                        size="small"
                        icon={
                          <SecurityIcon
                            sx={{ fontSize: "0.8rem !important" }}
                          />
                        }
                        label={
                          vuln.remediationAvailable ? "Fix Available" : "No Fix"
                        }
                        sx={{
                          height: 20,
                          fontSize: "0.65rem",
                          bgcolor: vuln.remediationAvailable
                            ? alpha(theme.palette.success.main, 0.1)
                            : alpha(theme.palette.error.main, 0.1),
                          color: vuln.remediationAvailable
                            ? theme.palette.success.main
                            : theme.palette.error.main,
                        }}
                      />
                      {vuln.exploitAvailable && (
                        <Chip
                          size="small"
                          icon={
                            <RssFeedIcon
                              sx={{ fontSize: "0.8rem !important" }}
                            />
                          }
                          label="Exploit Available"
                          sx={{
                            height: 20,
                            fontSize: "0.65rem",
                            bgcolor: alpha(theme.palette.error.main, 0.1),
                            color: theme.palette.error.main,
                          }}
                        />
                      )}
                      <Box
                        sx={{
                          display: "flex",
                          alignItems: "center",
                          ml: "auto",
                          fontSize: "0.7rem",
                          color: "text.secondary",
                        }}
                      >
                        <CalendarIcon sx={{ fontSize: "0.9rem", mr: 0.5 }} />
                        {formatDate(vuln.discoveredDate)}
                      </Box>
                    </Box>
                  </Box>
                }
              />
            </ListItem>
          ))}
        </List>
      </Box>

      {/* Footer */}
      <Box sx={{ mt: "auto", pt: 1, textAlign: "right" }}>
        <Button
          endIcon={<ArrowForwardIcon />}
          onClick={() => (window.location.href = "/vulnerabilities")}
          size="small"
        >
          View All Vulnerabilities
        </Button>
      </Box>
    </Box>
  );
};

export default VulnerabilityManagementWidget;
