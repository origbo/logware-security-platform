import React from "react";
import {
  Box,
  Grid,
  Paper,
  Typography,
  Card,
  CardContent,
  Chip,
  LinearProgress,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Divider,
  Avatar,
  useTheme,
} from "@mui/material";
import {
  BarChart,
  Bar,
  PieChart,
  Pie,
  Cell,
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from "recharts";
import { format, subDays } from "date-fns";
import ErrorIcon from "@mui/icons-material/Error";
import WarningIcon from "@mui/icons-material/Warning";
import InfoIcon from "@mui/icons-material/Info";
import BugReportIcon from "@mui/icons-material/BugReport";
import SecurityIcon from "@mui/icons-material/Security";
import {
  Vulnerability,
  ScanResult,
} from "../../pages/vulnerabilities/VulnerabilitiesPage";

// Interface for component props
interface VulnerabilityDashboardProps {
  vulnerabilities: Vulnerability[];
  scanResults: ScanResult[];
}

const VulnerabilityDashboard: React.FC<VulnerabilityDashboardProps> = ({
  vulnerabilities,
  scanResults,
}) => {
  const theme = useTheme();

  // Calculate statistics
  const totalVulnerabilities = vulnerabilities.length;
  const criticalVulnerabilities = vulnerabilities.filter(
    (v) => v.severity === "critical"
  ).length;
  const highVulnerabilities = vulnerabilities.filter(
    (v) => v.severity === "high"
  ).length;
  const mediumVulnerabilities = vulnerabilities.filter(
    (v) => v.severity === "medium"
  ).length;
  const lowVulnerabilities = vulnerabilities.filter(
    (v) => v.severity === "low"
  ).length;
  const infoVulnerabilities = vulnerabilities.filter(
    (v) => v.severity === "info"
  ).length;

  const openVulnerabilities = vulnerabilities.filter(
    (v) => v.status === "open"
  ).length;
  const inProgressVulnerabilities = vulnerabilities.filter(
    (v) => v.status === "in-progress"
  ).length;
  const resolvedVulnerabilities = vulnerabilities.filter(
    (v) => v.status === "resolved"
  ).length;
  const acceptedVulnerabilities = vulnerabilities.filter(
    (v) => v.status === "accepted"
  ).length;
  const falsePositiveVulnerabilities = vulnerabilities.filter(
    (v) => v.status === "false-positive"
  ).length;

  // Risk score calculation (weighted by severity)
  const riskScore = Math.round(
    (criticalVulnerabilities * 10 +
      highVulnerabilities * 5 +
      mediumVulnerabilities * 2 +
      lowVulnerabilities * 1) /
      (totalVulnerabilities > 0 ? totalVulnerabilities : 1)
  );

  // Prepare data for pie chart (vulnerability severity distribution)
  const severityData = [
    {
      name: "Critical",
      value: criticalVulnerabilities,
      color: theme.palette.error.dark,
    },
    {
      name: "High",
      value: highVulnerabilities,
      color: theme.palette.error.main,
    },
    {
      name: "Medium",
      value: mediumVulnerabilities,
      color: theme.palette.warning.main,
    },
    {
      name: "Low",
      value: lowVulnerabilities,
      color: theme.palette.success.main,
    },
    {
      name: "Info",
      value: infoVulnerabilities,
      color: theme.palette.info.main,
    },
  ].filter((item) => item.value > 0);

  // Prepare data for status distribution chart
  const statusData = [
    { name: "Open", value: openVulnerabilities },
    { name: "In Progress", value: inProgressVulnerabilities },
    { name: "Resolved", value: resolvedVulnerabilities },
    { name: "Accepted", value: acceptedVulnerabilities },
    { name: "False Positive", value: falsePositiveVulnerabilities },
  ].filter((item) => item.value > 0);

  // Prepare data for trend chart
  const trendData = [];
  const today = new Date();

  // Generate data for the last 7 days
  for (let i = 6; i >= 0; i--) {
    const date = subDays(today, i);
    const dateString = format(date, "MMM dd");

    // Count vulnerabilities discovered on or before this date
    const discovered = vulnerabilities.filter(
      (v) => new Date(v.discoveredDate) <= date
    ).length;

    // Count vulnerabilities resolved on or before this date
    const resolved = vulnerabilities.filter(
      (v) => v.status === "resolved" && new Date(v.lastUpdated) <= date
    ).length;

    trendData.push({
      date: dateString,
      discovered,
      resolved,
      active: discovered - resolved,
    });
  }

  // Most affected systems
  const systemCounts: { [key: string]: number } = {};
  vulnerabilities.forEach((vuln) => {
    vuln.affected.forEach((system) => {
      systemCounts[system] = (systemCounts[system] || 0) + 1;
    });
  });

  const topSystems = Object.entries(systemCounts)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 5)
    .map(([name, value]) => ({ name, value }));

  // Top categories
  const categoryCounts: { [key: string]: number } = {};
  vulnerabilities.forEach((vuln) => {
    categoryCounts[vuln.category] = (categoryCounts[vuln.category] || 0) + 1;
  });

  const topCategories = Object.entries(categoryCounts)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 5)
    .map(([name, value]) => ({ name, value }));

  // Recent scans
  const recentScans = scanResults.slice(0, 3);

  // High priority vulnerabilities
  const highPriorityVulnerabilities = vulnerabilities
    .filter(
      (v) =>
        (v.severity === "critical" || v.severity === "high") &&
        v.status !== "resolved"
    )
    .slice(0, 5);

  // Function to get color by severity
  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return theme.palette.error.dark;
      case "high":
        return theme.palette.error.main;
      case "medium":
        return theme.palette.warning.main;
      case "low":
        return theme.palette.success.main;
      case "info":
        return theme.palette.info.main;
      default:
        return theme.palette.grey[500];
    }
  };

  // Function to get icon by severity
  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "critical":
      case "high":
        return <ErrorIcon />;
      case "medium":
        return <WarningIcon />;
      case "low":
      case "info":
        return <InfoIcon />;
      default:
        return <BugReportIcon />;
    }
  };

  return (
    <Box>
      {/* Summary cards */}
      <Grid container spacing={2} sx={{ mb: 3 }}>
        <Grid item xs={12} sm={6} md={3}>
          <Paper
            sx={{
              p: 2,
              height: "100%",
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
              justifyContent: "center",
            }}
          >
            <Typography variant="h6" color="textSecondary" gutterBottom>
              Risk Score
            </Typography>
            <Box
              sx={{
                position: "relative",
                display: "inline-flex",
                justifyContent: "center",
                alignItems: "center",
              }}
            >
              <Avatar
                sx={{
                  width: 80,
                  height: 80,
                  bgcolor:
                    riskScore > 7
                      ? "error.main"
                      : riskScore > 4
                      ? "warning.main"
                      : "success.main",
                  fontSize: "2rem",
                }}
              >
                {riskScore}
              </Avatar>
            </Box>
            <Typography variant="body2" color="textSecondary" sx={{ mt: 1 }}>
              {riskScore > 7
                ? "High Risk"
                : riskScore > 4
                ? "Medium Risk"
                : "Low Risk"}
            </Typography>
          </Paper>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <Paper sx={{ p: 2, height: "100%" }}>
            <Typography variant="h6" color="textSecondary" gutterBottom>
              Vulnerabilities
            </Typography>
            <Typography variant="h3">{totalVulnerabilities}</Typography>
            <Box sx={{ mt: 2 }}>
              <Grid container spacing={1}>
                <Grid item xs={6}>
                  <Chip
                    icon={<ErrorIcon />}
                    label={`${
                      criticalVulnerabilities + highVulnerabilities
                    } Critical/High`}
                    size="small"
                    color="error"
                    sx={{ width: "100%" }}
                  />
                </Grid>
                <Grid item xs={6}>
                  <Chip
                    icon={<WarningIcon />}
                    label={`${mediumVulnerabilities} Medium`}
                    size="small"
                    color="warning"
                    sx={{ width: "100%" }}
                  />
                </Grid>
              </Grid>
            </Box>
          </Paper>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <Paper sx={{ p: 2, height: "100%" }}>
            <Typography variant="h6" color="textSecondary" gutterBottom>
              Remediation Status
            </Typography>
            <Box sx={{ mb: 2 }}>
              <Box
                sx={{
                  display: "flex",
                  justifyContent: "space-between",
                  mb: 0.5,
                }}
              >
                <Typography variant="body2">Progress</Typography>
                <Typography variant="body2" fontWeight="bold">
                  {Math.round(
                    (resolvedVulnerabilities / totalVulnerabilities) * 100
                  )}
                  %
                </Typography>
              </Box>
              <LinearProgress
                variant="determinate"
                value={(resolvedVulnerabilities / totalVulnerabilities) * 100}
                sx={{ height: 10, borderRadius: 5 }}
              />
            </Box>
            <Box>
              <Typography variant="body2" color="textSecondary">
                {openVulnerabilities} Open • {inProgressVulnerabilities} In
                Progress
              </Typography>
              <Typography variant="body2" color="textSecondary">
                {resolvedVulnerabilities} Resolved • {acceptedVulnerabilities}{" "}
                Accepted
              </Typography>
            </Box>
          </Paper>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <Paper sx={{ p: 2, height: "100%" }}>
            <Typography variant="h6" color="textSecondary" gutterBottom>
              Scans
            </Typography>
            <Typography variant="h3">{scanResults.length}</Typography>
            <Typography variant="body2" color="textSecondary" sx={{ mt: 1 }}>
              Last scan:{" "}
              {scanResults.length > 0
                ? format(new Date(scanResults[0].endTime), "MMM d, yyyy h:mm a")
                : "No scans yet"}
            </Typography>
            {scanResults.length > 0 &&
              scanResults[0].status === "completed" && (
                <Typography variant="body2" color="textSecondary">
                  Found {scanResults[0].vulnerabilitiesFound} vulnerabilities
                </Typography>
              )}
          </Paper>
        </Grid>
      </Grid>

      {/* Charts */}
      <Grid container spacing={3} sx={{ mb: 3 }}>
        <Grid item xs={12} md={6}>
          <Paper sx={{ p: 2 }}>
            <Typography variant="h6" gutterBottom>
              Severity Distribution
            </Typography>
            <Box sx={{ height: 300 }}>
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={severityData}
                    cx="50%"
                    cy="50%"
                    innerRadius={60}
                    outerRadius={80}
                    paddingAngle={5}
                    dataKey="value"
                    label={({ name, percent }) =>
                      `${name} ${(percent * 100).toFixed(0)}%`
                    }
                  >
                    {severityData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip />
                  <Legend />
                </PieChart>
              </ResponsiveContainer>
            </Box>
          </Paper>
        </Grid>

        <Grid item xs={12} md={6}>
          <Paper sx={{ p: 2 }}>
            <Typography variant="h6" gutterBottom>
              Vulnerabilities Trend
            </Typography>
            <Box sx={{ height: 300 }}>
              <ResponsiveContainer width="100%" height="100%">
                <LineChart
                  data={trendData}
                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                >
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="date" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Line
                    type="monotone"
                    dataKey="discovered"
                    name="Discovered"
                    stroke={theme.palette.info.main}
                    activeDot={{ r: 8 }}
                  />
                  <Line
                    type="monotone"
                    dataKey="resolved"
                    name="Resolved"
                    stroke={theme.palette.success.main}
                  />
                  <Line
                    type="monotone"
                    dataKey="active"
                    name="Active"
                    stroke={theme.palette.error.main}
                  />
                </LineChart>
              </ResponsiveContainer>
            </Box>
          </Paper>
        </Grid>

        <Grid item xs={12} md={6}>
          <Paper sx={{ p: 2 }}>
            <Typography variant="h6" gutterBottom>
              Most Affected Systems
            </Typography>
            <Box sx={{ height: 300 }}>
              <ResponsiveContainer width="100%" height="100%">
                <BarChart
                  data={topSystems}
                  layout="vertical"
                  margin={{ top: 5, right: 30, left: 100, bottom: 5 }}
                >
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis type="number" />
                  <YAxis
                    dataKey="name"
                    type="category"
                    tick={{ fontSize: 12 }}
                  />
                  <Tooltip />
                  <Bar
                    dataKey="value"
                    name="Vulnerabilities"
                    fill={theme.palette.primary.main}
                  />
                </BarChart>
              </ResponsiveContainer>
            </Box>
          </Paper>
        </Grid>

        <Grid item xs={12} md={6}>
          <Paper sx={{ p: 2 }}>
            <Typography variant="h6" gutterBottom>
              Top Vulnerability Categories
            </Typography>
            <Box sx={{ height: 300 }}>
              <ResponsiveContainer width="100%" height="100%">
                <BarChart
                  data={topCategories}
                  layout="vertical"
                  margin={{ top: 5, right: 30, left: 100, bottom: 5 }}
                >
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis type="number" />
                  <YAxis
                    dataKey="name"
                    type="category"
                    tick={{ fontSize: 12 }}
                  />
                  <Tooltip />
                  <Bar
                    dataKey="value"
                    name="Count"
                    fill={theme.palette.secondary.main}
                  />
                </BarChart>
              </ResponsiveContainer>
            </Box>
          </Paper>
        </Grid>
      </Grid>

      {/* Bottom cards */}
      <Grid container spacing={3}>
        <Grid item xs={12} md={6}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                Recent Scans
              </Typography>
              <List>
                {recentScans.map((scan) => (
                  <React.Fragment key={scan.id}>
                    <ListItem>
                      <ListItemIcon>
                        <SecurityIcon
                          color={
                            scan.status === "completed"
                              ? "success"
                              : scan.status === "failed"
                              ? "error"
                              : "info"
                          }
                        />
                      </ListItemIcon>
                      <ListItemText
                        primary={scan.name}
                        secondary={
                          <>
                            <Typography
                              component="span"
                              variant="body2"
                              color="textPrimary"
                            >
                              {format(new Date(scan.startTime), "MMM d, yyyy")}
                            </Typography>
                            {` — ${scan.targets.join(", ")}`}
                          </>
                        }
                      />
                      <Chip
                        label={scan.status}
                        color={
                          scan.status === "completed"
                            ? "success"
                            : scan.status === "failed"
                            ? "error"
                            : "warning"
                        }
                        size="small"
                      />
                    </ListItem>
                    <Divider component="li" />
                  </React.Fragment>
                ))}
                {recentScans.length === 0 && (
                  <ListItem>
                    <ListItemText primary="No scans available" />
                  </ListItem>
                )}
              </List>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} md={6}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                High Priority Vulnerabilities
              </Typography>
              <List>
                {highPriorityVulnerabilities.map((vuln) => (
                  <React.Fragment key={vuln.id}>
                    <ListItem>
                      <ListItemIcon>
                        {getSeverityIcon(vuln.severity)}
                      </ListItemIcon>
                      <ListItemText
                        primary={vuln.title}
                        secondary={
                          <>
                            <Typography
                              component="span"
                              variant="body2"
                              color="textPrimary"
                            >
                              {vuln.cveId || "No CVE"}
                            </Typography>
                            {` — CVSS: ${vuln.cvssScore}`}
                          </>
                        }
                      />
                      <Chip
                        label={vuln.severity}
                        size="small"
                        style={{
                          backgroundColor: getSeverityColor(vuln.severity),
                          color: "#fff",
                        }}
                      />
                    </ListItem>
                    <Divider component="li" />
                  </React.Fragment>
                ))}
                {highPriorityVulnerabilities.length === 0 && (
                  <ListItem>
                    <ListItemText primary="No high priority vulnerabilities" />
                  </ListItem>
                )}
              </List>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </Box>
  );
};

export default VulnerabilityDashboard;
