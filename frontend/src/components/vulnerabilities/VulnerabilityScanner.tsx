import React, { useState } from "react";
import {
  Box,
  Grid,
  Paper,
  Typography,
  Button,
  TextField,
  FormControlLabel,
  Checkbox,
  Card,
  CardContent,
  Chip,
  Divider,
  LinearProgress,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  IconButton,
  Tooltip,
  useTheme,
} from "@mui/material";
import { format } from "date-fns";
import PlayArrowIcon from "@mui/icons-material/PlayArrow";
import CloudDownloadIcon from "@mui/icons-material/CloudDownload";
import DeleteIcon from "@mui/icons-material/Delete";
import VisibilityIcon from "@mui/icons-material/Visibility";
import { ScanResult } from "../../pages/vulnerabilities/VulnerabilitiesPage";

// Interface for component props
interface VulnerabilityScannerProps {
  scanResults: ScanResult[];
}

const VulnerabilityScanner: React.FC<VulnerabilityScannerProps> = ({
  scanResults,
}) => {
  const theme = useTheme();

  // State for new scan form
  const [targetInput, setTargetInput] = useState("");
  const [targets, setTargets] = useState<string[]>([]);
  const [scanName, setScanName] = useState("");
  const [scanOptions, setScanOptions] = useState({
    fullScan: true,
    portScan: true,
    webVulnerabilities: true,
    networkServices: true,
    credentialedScan: false,
    followRedirects: true,
  });

  // Add target to list
  const handleAddTarget = () => {
    if (targetInput && !targets.includes(targetInput)) {
      setTargets([...targets, targetInput]);
      setTargetInput("");
    }
  };

  // Remove target from list
  const handleRemoveTarget = (target: string) => {
    setTargets(targets.filter((t) => t !== target));
  };

  // Handle option change
  const handleOptionChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setScanOptions({
      ...scanOptions,
      [event.target.name]: event.target.checked,
    });
  };

  // Start scan
  const handleStartScan = () => {
    console.log("Starting scan with targets:", targets);
    console.log("Scan options:", scanOptions);

    // Reset form
    setTargets([]);
    setScanName("");
    setScanOptions({
      fullScan: true,
      portScan: true,
      webVulnerabilities: true,
      networkServices: true,
      credentialedScan: false,
      followRedirects: true,
    });
  };

  // Format scan status
  const getScanStatusChip = (status: string) => {
    let color = "default";

    switch (status) {
      case "in-progress":
        color = "warning";
        break;
      case "completed":
        color = "success";
        break;
      case "failed":
        color = "error";
        break;
      default:
        color = "default";
    }

    return (
      <Chip
        label={status.replace("-", " ")}
        color={color as any}
        size="small"
        sx={{ textTransform: "capitalize" }}
      />
    );
  };

  return (
    <Box>
      <Grid container spacing={3}>
        {/* New Scan Configuration */}
        <Grid item xs={12} md={6}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom>
              Configure New Scan
            </Typography>

            <TextField
              fullWidth
              label="Scan Name"
              value={scanName}
              onChange={(e) => setScanName(e.target.value)}
              margin="normal"
              variant="outlined"
              placeholder="e.g., Weekly Network Scan"
            />

            <Box sx={{ display: "flex", mt: 2 }}>
              <TextField
                fullWidth
                label="Target"
                value={targetInput}
                onChange={(e) => setTargetInput(e.target.value)}
                margin="normal"
                variant="outlined"
                placeholder="IP, hostname, URL, or CIDR range"
              />
              <Button
                variant="contained"
                onClick={handleAddTarget}
                sx={{ ml: 1, mt: 2 }}
                disabled={!targetInput}
              >
                Add
              </Button>
            </Box>

            {targets.length > 0 && (
              <Box sx={{ mt: 2, mb: 2 }}>
                <Typography variant="subtitle2" gutterBottom>
                  Targets to Scan:
                </Typography>
                <Box sx={{ display: "flex", flexWrap: "wrap", gap: 1 }}>
                  {targets.map((target) => (
                    <Chip
                      key={target}
                      label={target}
                      onDelete={() => handleRemoveTarget(target)}
                      color="primary"
                      variant="outlined"
                    />
                  ))}
                </Box>
              </Box>
            )}

            <Divider sx={{ my: 3 }} />

            <Typography variant="subtitle1" gutterBottom>
              Scan Options
            </Typography>

            <Grid container spacing={2}>
              <Grid item xs={12} sm={6}>
                <FormControlLabel
                  control={
                    <Checkbox
                      checked={scanOptions.fullScan}
                      onChange={handleOptionChange}
                      name="fullScan"
                      color="primary"
                    />
                  }
                  label="Full Scan"
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <FormControlLabel
                  control={
                    <Checkbox
                      checked={scanOptions.portScan}
                      onChange={handleOptionChange}
                      name="portScan"
                      color="primary"
                    />
                  }
                  label="Port Scan"
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <FormControlLabel
                  control={
                    <Checkbox
                      checked={scanOptions.webVulnerabilities}
                      onChange={handleOptionChange}
                      name="webVulnerabilities"
                      color="primary"
                    />
                  }
                  label="Web Vulnerabilities"
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <FormControlLabel
                  control={
                    <Checkbox
                      checked={scanOptions.networkServices}
                      onChange={handleOptionChange}
                      name="networkServices"
                      color="primary"
                    />
                  }
                  label="Network Services"
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <FormControlLabel
                  control={
                    <Checkbox
                      checked={scanOptions.credentialedScan}
                      onChange={handleOptionChange}
                      name="credentialedScan"
                      color="primary"
                    />
                  }
                  label="Credentialed Scan"
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <FormControlLabel
                  control={
                    <Checkbox
                      checked={scanOptions.followRedirects}
                      onChange={handleOptionChange}
                      name="followRedirects"
                      color="primary"
                    />
                  }
                  label="Follow Redirects"
                />
              </Grid>
            </Grid>

            <Button
              variant="contained"
              color="primary"
              startIcon={<PlayArrowIcon />}
              onClick={handleStartScan}
              disabled={targets.length === 0 || !scanName}
              fullWidth
              sx={{ mt: 3 }}
            >
              Start Scan
            </Button>
          </Paper>
        </Grid>

        {/* Scan Results */}
        <Grid item xs={12} md={6}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom>
              Recent Scans
            </Typography>

            {scanResults.length === 0 ? (
              <Typography
                variant="body1"
                color="textSecondary"
                sx={{ textAlign: "center", py: 4 }}
              >
                No scan history available
              </Typography>
            ) : (
              <TableContainer>
                <Table size="small">
                  <TableHead>
                    <TableRow>
                      <TableCell>Scan Name</TableCell>
                      <TableCell>Date</TableCell>
                      <TableCell>Status</TableCell>
                      <TableCell>Findings</TableCell>
                      <TableCell align="right">Actions</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {scanResults.map((scan) => (
                      <TableRow key={scan.id} hover>
                        <TableCell>
                          <Typography variant="body2" fontWeight="medium">
                            {scan.name}
                          </Typography>
                          <Typography variant="caption" color="textSecondary">
                            {scan.targets.join(", ")}
                          </Typography>
                        </TableCell>
                        <TableCell>
                          {format(new Date(scan.startTime), "MMM d, yyyy")}
                        </TableCell>
                        <TableCell>
                          {getScanStatusChip(scan.status)}

                          {scan.status === "in-progress" && (
                            <Box sx={{ mt: 1, width: "100%" }}>
                              <LinearProgress />
                            </Box>
                          )}
                        </TableCell>
                        <TableCell>
                          {scan.status === "completed" ? (
                            <Box>
                              <Typography variant="body2">
                                {scan.vulnerabilitiesFound} total
                              </Typography>
                              <Typography variant="caption" color="error">
                                {scan.criticalCount + scan.highCount}{" "}
                                critical/high
                              </Typography>
                            </Box>
                          ) : (
                            "-"
                          )}
                        </TableCell>
                        <TableCell align="right">
                          <Tooltip title="View Details">
                            <IconButton size="small">
                              <VisibilityIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>
                          {scan.status === "completed" && (
                            <Tooltip title="Download Report">
                              <IconButton size="small">
                                <CloudDownloadIcon fontSize="small" />
                              </IconButton>
                            </Tooltip>
                          )}
                          <Tooltip title="Delete">
                            <IconButton size="small">
                              <DeleteIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
            )}
          </Paper>

          {/* Active Scan */}
          {scanResults.some((scan) => scan.status === "in-progress") && (
            <Card
              sx={{
                mt: 3,
                p: 2,
                bgcolor: theme.palette.primary.light,
                color: theme.palette.primary.contrastText,
              }}
            >
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  Active Scan in Progress
                </Typography>

                <LinearProgress color="inherit" sx={{ mb: 2 }} />

                <Typography variant="body2">
                  Target:{" "}
                  {scanResults
                    .find((scan) => scan.status === "in-progress")
                    ?.targets.join(", ")}
                </Typography>

                <Typography variant="body2">
                  Started:{" "}
                  {format(
                    new Date(
                      scanResults.find((scan) => scan.status === "in-progress")
                        ?.startTime || new Date()
                    ),
                    "MMM d, yyyy h:mm a"
                  )}
                </Typography>

                <Button variant="outlined" color="inherit" sx={{ mt: 2 }}>
                  Cancel Scan
                </Button>
              </CardContent>
            </Card>
          )}

          {/* Scan Schedule Card */}
          <Card sx={{ mt: 3 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                Scheduled Scans
              </Typography>

              <Box
                sx={{ display: "flex", justifyContent: "space-between", mb: 1 }}
              >
                <Typography variant="body2">Weekly Network Scan</Typography>
                <Typography variant="body2" color="textSecondary">
                  Every Monday at 2:00 AM
                </Typography>
              </Box>

              <Box
                sx={{ display: "flex", justifyContent: "space-between", mb: 1 }}
              >
                <Typography variant="body2">
                  Monthly Web Application Scan
                </Typography>
                <Typography variant="body2" color="textSecondary">
                  1st of each month
                </Typography>
              </Box>

              <Button
                variant="outlined"
                color="primary"
                size="small"
                sx={{ mt: 1 }}
              >
                Manage Schedule
              </Button>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </Box>
  );
};

export default VulnerabilityScanner;
