import React, { useState } from "react";
import {
  Box,
  Paper,
  Typography,
  TableContainer,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  TableSortLabel,
  TablePagination,
  Chip,
  IconButton,
  Collapse,
  Grid,
  TextField,
  InputAdornment,
  MenuItem,
  FormControl,
  InputLabel,
  Select,
  SelectChangeEvent,
  Tooltip,
  Card,
  CardContent,
  Button,
  useTheme,
} from "@mui/material";
import { visuallyHidden } from "@mui/utils";
import { format } from "date-fns";
import SearchIcon from "@mui/icons-material/Search";
import FilterListIcon from "@mui/icons-material/FilterList";
import KeyboardArrowUpIcon from "@mui/icons-material/KeyboardArrowUp";
import KeyboardArrowDownIcon from "@mui/icons-material/KeyboardArrowDown";
import EditIcon from "@mui/icons-material/Edit";
import AssignmentIcon from "@mui/icons-material/Assignment";
import CheckCircleIcon from "@mui/icons-material/CheckCircle";
import LinkIcon from "@mui/icons-material/Link";
import PersonIcon from "@mui/icons-material/Person";
import { Vulnerability } from "../../pages/vulnerabilities/VulnerabilitiesPage";

// Interface for component props
interface VulnerabilityListProps {
  vulnerabilities: Vulnerability[];
}

// Interface for sorting
type Order = "asc" | "desc";

interface HeadCell {
  id: keyof Vulnerability | "actions";
  label: string;
  numeric: boolean;
  sortable: boolean;
}

// Define table headers
const headCells: HeadCell[] = [
  { id: "title", label: "Vulnerability", numeric: false, sortable: true },
  { id: "severity", label: "Severity", numeric: false, sortable: true },
  { id: "cvssScore", label: "CVSS Score", numeric: true, sortable: true },
  { id: "status", label: "Status", numeric: false, sortable: true },
  {
    id: "affected",
    label: "Affected Systems",
    numeric: false,
    sortable: false,
  },
  { id: "discoveredDate", label: "Discovered", numeric: false, sortable: true },
  { id: "actions", label: "Actions", numeric: false, sortable: false },
];

const VulnerabilityList: React.FC<VulnerabilityListProps> = ({
  vulnerabilities,
}) => {
  const theme = useTheme();

  // State for sorting
  const [order, setOrder] = useState<Order>("desc");
  const [orderBy, setOrderBy] = useState<keyof Vulnerability>("severity");

  // State for pagination
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);

  // State for filtering
  const [filterOpen, setFilterOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedSeverities, setSelectedSeverities] = useState<string[]>([]);
  const [selectedStatuses, setSelectedStatuses] = useState<string[]>([]);

  // State for expanded row
  const [expandedId, setExpandedId] = useState<string | null>(null);

  // Handle sorting
  const handleRequestSort = (property: keyof Vulnerability) => {
    const isAsc = orderBy === property && order === "asc";
    setOrder(isAsc ? "desc" : "asc");
    setOrderBy(property);
  };

  // Handle pagination
  const handleChangePage = (event: unknown, newPage: number) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  // Handle filtering
  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(event.target.value);
    setPage(0);
  };

  const handleSeverityChange = (event: SelectChangeEvent<string[]>) => {
    setSelectedSeverities(event.target.value as string[]);
    setPage(0);
  };

  const handleStatusChange = (event: SelectChangeEvent<string[]>) => {
    setSelectedStatuses(event.target.value as string[]);
    setPage(0);
  };

  // Toggle expanded row
  const handleToggleExpand = (id: string) => {
    setExpandedId(expandedId === id ? null : id);
  };

  // Filter and sort vulnerabilities
  const filteredVulnerabilities = vulnerabilities.filter((vuln) => {
    // Apply search filter
    if (
      searchQuery &&
      !vuln.title.toLowerCase().includes(searchQuery.toLowerCase()) &&
      !vuln.description.toLowerCase().includes(searchQuery.toLowerCase()) &&
      !(
        vuln.cveId &&
        vuln.cveId.toLowerCase().includes(searchQuery.toLowerCase())
      )
    ) {
      return false;
    }

    // Apply severity filter
    if (
      selectedSeverities.length > 0 &&
      !selectedSeverities.includes(vuln.severity)
    ) {
      return false;
    }

    // Apply status filter
    if (
      selectedStatuses.length > 0 &&
      !selectedStatuses.includes(vuln.status)
    ) {
      return false;
    }

    return true;
  });

  // Sort vulnerabilities
  const sortedVulnerabilities = filteredVulnerabilities.sort((a, b) => {
    const aValue = a[orderBy];
    const bValue = b[orderBy];

    if (
      orderBy === "discoveredDate" ||
      orderBy === "lastUpdated" ||
      orderBy === "dueDate"
    ) {
      // Date comparison
      const aDate = aValue ? new Date(aValue as Date).getTime() : 0;
      const bDate = bValue ? new Date(bValue as Date).getTime() : 0;
      return order === "asc" ? aDate - bDate : bDate - aDate;
    } else if (orderBy === "affected") {
      // Array comparison by length
      const aAffected = a.affected.length;
      const bAffected = b.affected.length;
      return order === "asc" ? aAffected - bAffected : bAffected - aAffected;
    } else if (typeof aValue === "string" && typeof bValue === "string") {
      // String comparison
      return order === "asc"
        ? aValue.localeCompare(bValue)
        : bValue.localeCompare(aValue);
    } else {
      // Number comparison
      const aNum = (aValue as number) || 0;
      const bNum = (bValue as number) || 0;
      return order === "asc" ? aNum - bNum : bNum - aNum;
    }
  });

  // Paginate vulnerabilities
  const paginatedVulnerabilities = sortedVulnerabilities.slice(
    page * rowsPerPage,
    page * rowsPerPage + rowsPerPage
  );

  // Get color by severity
  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return theme.palette.error.dark;
      case "high":
        return theme.palette.error.main;
      case "medium":
        return theme.palette.warning.main;
      case "low":
        return theme.palette.success.main;
      case "info":
        return theme.palette.info.main;
      default:
        return theme.palette.grey[500];
    }
  };

  // Get color by status
  const getStatusColor = (status: string) => {
    switch (status) {
      case "open":
        return theme.palette.error.main;
      case "in-progress":
        return theme.palette.warning.main;
      case "resolved":
        return theme.palette.success.main;
      case "accepted":
        return theme.palette.info.main;
      case "false-positive":
        return theme.palette.grey[500];
      default:
        return theme.palette.grey[500];
    }
  };

  return (
    <Box>
      {/* Search and Filter Bar */}
      <Paper sx={{ mb: 2, p: 2 }}>
        <Grid container spacing={2} alignItems="center">
          <Grid item xs={12} sm={6} md={4}>
            <TextField
              fullWidth
              placeholder="Search vulnerabilities..."
              variant="outlined"
              size="small"
              value={searchQuery}
              onChange={handleSearchChange}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SearchIcon />
                  </InputAdornment>
                ),
              }}
            />
          </Grid>

          <Grid
            item
            xs={12}
            sm={6}
            md={8}
            sx={{ display: "flex", justifyContent: "flex-end" }}
          >
            <Button
              startIcon={<FilterListIcon />}
              onClick={() => setFilterOpen(!filterOpen)}
              color={filterOpen ? "primary" : "inherit"}
              variant={filterOpen ? "contained" : "outlined"}
              sx={{ ml: 1 }}
            >
              Filters
            </Button>
          </Grid>

          {filterOpen && (
            <Grid item xs={12}>
              <Grid container spacing={2} sx={{ mt: 1 }}>
                <Grid item xs={12} sm={6}>
                  <FormControl fullWidth size="small">
                    <InputLabel id="severity-filter-label">Severity</InputLabel>
                    <Select
                      labelId="severity-filter-label"
                      multiple
                      value={selectedSeverities}
                      onChange={handleSeverityChange}
                      label="Severity"
                      renderValue={(selected) => (
                        <Box
                          sx={{ display: "flex", flexWrap: "wrap", gap: 0.5 }}
                        >
                          {(selected as string[]).map((value) => (
                            <Chip
                              key={value}
                              label={value}
                              size="small"
                              sx={{
                                bgcolor: getSeverityColor(value),
                                color: "#fff",
                              }}
                            />
                          ))}
                        </Box>
                      )}
                    >
                      {["critical", "high", "medium", "low", "info"].map(
                        (severity) => (
                          <MenuItem key={severity} value={severity}>
                            {severity.charAt(0).toUpperCase() +
                              severity.slice(1)}
                          </MenuItem>
                        )
                      )}
                    </Select>
                  </FormControl>
                </Grid>

                <Grid item xs={12} sm={6}>
                  <FormControl fullWidth size="small">
                    <InputLabel id="status-filter-label">Status</InputLabel>
                    <Select
                      labelId="status-filter-label"
                      multiple
                      value={selectedStatuses}
                      onChange={handleStatusChange}
                      label="Status"
                      renderValue={(selected) => (
                        <Box
                          sx={{ display: "flex", flexWrap: "wrap", gap: 0.5 }}
                        >
                          {(selected as string[]).map((value) => (
                            <Chip
                              key={value}
                              label={value}
                              size="small"
                              sx={{
                                bgcolor: getStatusColor(value),
                                color: "#fff",
                              }}
                            />
                          ))}
                        </Box>
                      )}
                    >
                      {[
                        "open",
                        "in-progress",
                        "resolved",
                        "accepted",
                        "false-positive",
                      ].map((status) => (
                        <MenuItem key={status} value={status}>
                          {status
                            .split("-")
                            .map(
                              (word) =>
                                word.charAt(0).toUpperCase() + word.slice(1)
                            )
                            .join(" ")}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
              </Grid>
            </Grid>
          )}
        </Grid>
      </Paper>

      {/* Vulnerabilities Table */}
      <Paper>
        <TableContainer>
          <Table size="medium">
            <TableHead>
              <TableRow>
                <TableCell padding="checkbox" />
                {headCells.map((headCell) => (
                  <TableCell
                    key={headCell.id}
                    align={headCell.numeric ? "right" : "left"}
                    sortDirection={orderBy === headCell.id ? order : false}
                  >
                    {headCell.sortable ? (
                      <TableSortLabel
                        active={orderBy === headCell.id}
                        direction={orderBy === headCell.id ? order : "asc"}
                        onClick={() =>
                          handleRequestSort(headCell.id as keyof Vulnerability)
                        }
                      >
                        {headCell.label}
                        {orderBy === headCell.id ? (
                          <Box component="span" sx={visuallyHidden}>
                            {order === "desc"
                              ? "sorted descending"
                              : "sorted ascending"}
                          </Box>
                        ) : null}
                      </TableSortLabel>
                    ) : (
                      headCell.label
                    )}
                  </TableCell>
                ))}
              </TableRow>
            </TableHead>
            <TableBody>
              {paginatedVulnerabilities.map((vuln) => {
                const isExpanded = expandedId === vuln.id;

                return (
                  <React.Fragment key={vuln.id}>
                    <TableRow
                      hover
                      tabIndex={-1}
                      sx={{ "& > *": { borderBottom: "unset" } }}
                    >
                      <TableCell padding="checkbox">
                        <IconButton
                          aria-label="expand row"
                          size="small"
                          onClick={() => handleToggleExpand(vuln.id)}
                        >
                          {isExpanded ? (
                            <KeyboardArrowUpIcon />
                          ) : (
                            <KeyboardArrowDownIcon />
                          )}
                        </IconButton>
                      </TableCell>
                      <TableCell component="th" scope="row">
                        <Typography variant="body2" fontWeight="medium">
                          {vuln.title}
                        </Typography>
                        {vuln.cveId && (
                          <Typography variant="caption" color="textSecondary">
                            {vuln.cveId}
                          </Typography>
                        )}
                      </TableCell>
                      <TableCell>
                        <Chip
                          label={vuln.severity.toUpperCase()}
                          size="small"
                          sx={{
                            bgcolor: getSeverityColor(vuln.severity),
                            color: "#fff",
                            fontWeight: "bold",
                          }}
                        />
                      </TableCell>
                      <TableCell align="right">
                        {vuln.cvssScore.toFixed(1)}
                      </TableCell>
                      <TableCell>
                        <Chip
                          label={vuln.status.replace("-", " ")}
                          size="small"
                          sx={{
                            bgcolor: getStatusColor(vuln.status),
                            color: "#fff",
                          }}
                        />
                      </TableCell>
                      <TableCell>
                        {vuln.affected.slice(0, 2).map((system, index) => (
                          <Typography key={index} variant="body2">
                            {system}
                          </Typography>
                        ))}
                        {vuln.affected.length > 2 && (
                          <Typography variant="body2" color="textSecondary">
                            +{vuln.affected.length - 2} more
                          </Typography>
                        )}
                      </TableCell>
                      <TableCell>
                        {format(new Date(vuln.discoveredDate), "MMM d, yyyy")}
                      </TableCell>
                      <TableCell>
                        <Tooltip title="Edit">
                          <IconButton size="small">
                            <EditIcon fontSize="small" />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Assign">
                          <IconButton size="small">
                            <PersonIcon fontSize="small" />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Mark as Resolved">
                          <IconButton
                            size="small"
                            disabled={vuln.status === "resolved"}
                          >
                            <CheckCircleIcon fontSize="small" />
                          </IconButton>
                        </Tooltip>
                      </TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell sx={{ py: 0 }} colSpan={8}>
                        <Collapse in={isExpanded} timeout="auto" unmountOnExit>
                          <Box sx={{ p: 3 }}>
                            <Card variant="outlined">
                              <CardContent>
                                <Grid container spacing={3}>
                                  <Grid item xs={12} md={8}>
                                    <Typography variant="h6" gutterBottom>
                                      Details
                                    </Typography>
                                    <Typography variant="body2" paragraph>
                                      {vuln.description}
                                    </Typography>

                                    {vuln.remediation && (
                                      <>
                                        <Typography
                                          variant="subtitle2"
                                          gutterBottom
                                        >
                                          Remediation
                                        </Typography>
                                        <Typography variant="body2" paragraph>
                                          {vuln.remediation}
                                        </Typography>
                                      </>
                                    )}

                                    <Grid container spacing={2} sx={{ mt: 2 }}>
                                      <Grid item xs={12} sm={6} md={4}>
                                        <Typography
                                          variant="subtitle2"
                                          gutterBottom
                                        >
                                          Category
                                        </Typography>
                                        <Typography variant="body2">
                                          {vuln.category}
                                        </Typography>
                                      </Grid>
                                      <Grid item xs={12} sm={6} md={4}>
                                        <Typography
                                          variant="subtitle2"
                                          gutterBottom
                                        >
                                          Systems Affected
                                        </Typography>
                                        <Typography variant="body2">
                                          {vuln.systemsAffected}
                                        </Typography>
                                      </Grid>
                                      <Grid item xs={12} sm={6} md={4}>
                                        <Typography
                                          variant="subtitle2"
                                          gutterBottom
                                        >
                                          Reported By
                                        </Typography>
                                        <Typography variant="body2">
                                          {vuln.reportedBy}
                                        </Typography>
                                      </Grid>
                                    </Grid>

                                    <Typography
                                      variant="subtitle2"
                                      gutterBottom
                                      sx={{ mt: 2 }}
                                    >
                                      Tags
                                    </Typography>
                                    <Box
                                      sx={{
                                        display: "flex",
                                        flexWrap: "wrap",
                                        gap: 0.5,
                                      }}
                                    >
                                      {vuln.tags.map((tag) => (
                                        <Chip
                                          key={tag}
                                          label={tag}
                                          size="small"
                                          variant="outlined"
                                        />
                                      ))}
                                    </Box>
                                  </Grid>

                                  <Grid item xs={12} md={4}>
                                    <Typography variant="h6" gutterBottom>
                                      Status Information
                                    </Typography>

                                    <Box sx={{ mb: 2 }}>
                                      <Typography
                                        variant="subtitle2"
                                        gutterBottom
                                      >
                                        Dates
                                      </Typography>
                                      <Grid container spacing={1}>
                                        <Grid item xs={5}>
                                          <Typography
                                            variant="caption"
                                            color="textSecondary"
                                          >
                                            Discovered:
                                          </Typography>
                                        </Grid>
                                        <Grid item xs={7}>
                                          <Typography variant="body2">
                                            {format(
                                              new Date(vuln.discoveredDate),
                                              "MMM d, yyyy"
                                            )}
                                          </Typography>
                                        </Grid>

                                        <Grid item xs={5}>
                                          <Typography
                                            variant="caption"
                                            color="textSecondary"
                                          >
                                            Last Updated:
                                          </Typography>
                                        </Grid>
                                        <Grid item xs={7}>
                                          <Typography variant="body2">
                                            {format(
                                              new Date(vuln.lastUpdated),
                                              "MMM d, yyyy"
                                            )}
                                          </Typography>
                                        </Grid>

                                        {vuln.dueDate && (
                                          <>
                                            <Grid item xs={5}>
                                              <Typography
                                                variant="caption"
                                                color="textSecondary"
                                              >
                                                Due Date:
                                              </Typography>
                                            </Grid>
                                            <Grid item xs={7}>
                                              <Typography
                                                variant="body2"
                                                sx={{
                                                  color:
                                                    new Date(vuln.dueDate) <
                                                    new Date()
                                                      ? "error.main"
                                                      : "inherit",
                                                }}
                                              >
                                                {format(
                                                  new Date(vuln.dueDate),
                                                  "MMM d, yyyy"
                                                )}
                                              </Typography>
                                            </Grid>
                                          </>
                                        )}
                                      </Grid>
                                    </Box>

                                    {vuln.assignedTo && (
                                      <Box sx={{ mb: 2 }}>
                                        <Typography
                                          variant="subtitle2"
                                          gutterBottom
                                        >
                                          Assigned To
                                        </Typography>
                                        <Typography variant="body2">
                                          {vuln.assignedTo}
                                        </Typography>
                                      </Box>
                                    )}

                                    <Box sx={{ mb: 2 }}>
                                      <Typography
                                        variant="subtitle2"
                                        gutterBottom
                                      >
                                        Exploit Status
                                      </Typography>
                                      <Grid container spacing={1}>
                                        <Grid item xs={6}>
                                          <Chip
                                            icon={<LinkIcon />}
                                            label={
                                              vuln.exploitAvailable
                                                ? "Exploit Available"
                                                : "No Known Exploit"
                                            }
                                            size="small"
                                            color={
                                              vuln.exploitAvailable
                                                ? "error"
                                                : "default"
                                            }
                                            variant={
                                              vuln.exploitAvailable
                                                ? "filled"
                                                : "outlined"
                                            }
                                          />
                                        </Grid>
                                        <Grid item xs={6}>
                                          <Chip
                                            icon={<CheckCircleIcon />}
                                            label={
                                              vuln.patchAvailable
                                                ? "Patch Available"
                                                : "No Patch"
                                            }
                                            size="small"
                                            color={
                                              vuln.patchAvailable
                                                ? "success"
                                                : "warning"
                                            }
                                            variant={
                                              vuln.patchAvailable
                                                ? "filled"
                                                : "outlined"
                                            }
                                          />
                                        </Grid>
                                      </Grid>
                                    </Box>

                                    <Box sx={{ mt: 3 }}>
                                      <Button
                                        variant="contained"
                                        fullWidth
                                        startIcon={<AssignmentIcon />}
                                        color="primary"
                                        sx={{ mb: 1 }}
                                      >
                                        Create Task
                                      </Button>

                                      <Button
                                        variant="outlined"
                                        fullWidth
                                        color="inherit"
                                      >
                                        View Full Report
                                      </Button>
                                    </Box>
                                  </Grid>
                                </Grid>
                              </CardContent>
                            </Card>
                          </Box>
                        </Collapse>
                      </TableCell>
                    </TableRow>
                  </React.Fragment>
                );
              })}

              {paginatedVulnerabilities.length === 0 && (
                <TableRow>
                  <TableCell colSpan={8} sx={{ textAlign: "center", py: 3 }}>
                    {filteredVulnerabilities.length === 0 ? (
                      <Typography variant="body1" color="textSecondary">
                        No vulnerabilities match your filters
                      </Typography>
                    ) : (
                      <Typography variant="body1" color="textSecondary">
                        No vulnerabilities to display
                      </Typography>
                    )}
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </TableContainer>

        <TablePagination
          rowsPerPageOptions={[5, 10, 25]}
          component="div"
          count={filteredVulnerabilities.length}
          rowsPerPage={rowsPerPage}
          page={page}
          onPageChange={handleChangePage}
          onRowsPerPageChange={handleChangeRowsPerPage}
        />
      </Paper>
    </Box>
  );
};

export default VulnerabilityList;
