import React, { useState } from "react";
import {
  Box,
  Grid,
  Paper,
  Typography,
  Card,
  CardContent,
  Button,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Chip,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  IconButton,
  Tooltip,
  Divider,
  useTheme,
} from "@mui/material";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { AdapterDateFns } from "@mui/x-date-pickers/AdapterDateFns";
import { format } from "date-fns";
import DownloadIcon from "@mui/icons-material/Download";
import EmailIcon from "@mui/icons-material/Email";
import VisibilityIcon from "@mui/icons-material/Visibility";
import DeleteIcon from "@mui/icons-material/Delete";
import PictureAsPdfIcon from "@mui/icons-material/PictureAsPdf";
import TableChartIcon from "@mui/icons-material/TableChart";
import InsertDriveFileIcon from "@mui/icons-material/InsertDriveFile";
import {
  Vulnerability,
  ScanResult,
} from "../../pages/vulnerabilities/VulnerabilitiesPage";

// Interface for component props
interface VulnerabilityReportsProps {
  vulnerabilities: Vulnerability[];
  scanResults: ScanResult[];
}

// Define report types
const reportTypes = [
  {
    id: "executive",
    name: "Executive Summary",
    description: "High-level overview for management",
  },
  {
    id: "detailed",
    name: "Detailed Technical Report",
    description: "Complete technical details of all findings",
  },
  {
    id: "remediation",
    name: "Remediation Plan",
    description: "Actionable steps to address vulnerabilities",
  },
  {
    id: "compliance",
    name: "Compliance Report",
    description: "Focus on compliance with specific standards",
  },
  {
    id: "scan",
    name: "Scan Results",
    description: "Raw results from a specific vulnerability scan",
  },
];

// Define mock reports
const mockReports = [
  {
    id: "1",
    name: "Q2 2025 Executive Summary",
    type: "executive",
    format: "pdf",
    createdDate: new Date(2025, 3, 15),
    createdBy: "John Smith",
    size: "1.2 MB",
  },
  {
    id: "2",
    name: "Critical Vulnerabilities - May 2025",
    type: "detailed",
    format: "xlsx",
    createdDate: new Date(2025, 4, 5),
    createdBy: "Security Scanner",
    size: "3.5 MB",
  },
  {
    id: "3",
    name: "PCI DSS Compliance Report",
    type: "compliance",
    format: "pdf",
    createdDate: new Date(2025, 4, 10),
    createdBy: "Sarah Wilson",
    size: "2.7 MB",
  },
  {
    id: "4",
    name: "Web Application Scan - April 2025",
    type: "scan",
    format: "csv",
    createdDate: new Date(2025, 3, 28),
    createdBy: "Automated Scanner",
    size: "4.1 MB",
  },
];

const VulnerabilityReports: React.FC<VulnerabilityReportsProps> = ({
  vulnerabilities,
  scanResults,
}) => {
  const theme = useTheme();

  // State for report generation
  const [reportType, setReportType] = useState("");
  const [reportFormat, setReportFormat] = useState("pdf");
  const [reportName, setReportName] = useState("");
  const [dateRange, setDateRange] = useState<{
    start: Date | null;
    end: Date | null;
  }>({
    start: null,
    end: null,
  });
  const [selectedSeverities, setSelectedSeverities] = useState<string[]>([]);

  // State for reports list
  const [reports, setReports] = useState(mockReports);

  // Generate a new report
  const handleGenerateReport = () => {
    // In a real application, this would call an API
    console.log("Generating report with:", {
      type: reportType,
      format: reportFormat,
      name: reportName,
      dateRange,
      severities: selectedSeverities,
    });

    // For demonstration, add a mock report to the list
    const newReport = {
      id: `${reports.length + 1}`,
      name: reportName || "Untitled Report",
      type: reportType,
      format: reportFormat,
      createdDate: new Date(),
      createdBy: "Current User",
      size: `${(Math.random() * 5 + 1).toFixed(1)} MB`,
    };

    setReports([newReport, ...reports]);

    // Reset form
    setReportName("");
    setReportType("");
    setReportFormat("pdf");
    setDateRange({ start: null, end: null });
    setSelectedSeverities([]);
  };

  // Delete a report
  const handleDeleteReport = (reportId: string) => {
    setReports(reports.filter((report) => report.id !== reportId));
  };

  // Get icon for report format
  const getFormatIcon = (format: string) => {
    switch (format) {
      case "pdf":
        return <PictureAsPdfIcon fontSize="small" />;
      case "xlsx":
        return <TableChartIcon fontSize="small" />;
      case "csv":
        return <InsertDriveFileIcon fontSize="small" />;
      default:
        return <InsertDriveFileIcon fontSize="small" />;
    }
  };

  // Get color for report format
  const getFormatColor = (format: string) => {
    switch (format) {
      case "pdf":
        return "error";
      case "xlsx":
        return "success";
      case "csv":
        return "primary";
      default:
        return "default";
    }
  };

  // Get severity statistics
  const getSeverityCounts = () => {
    const counts = {
      critical: vulnerabilities.filter((v) => v.severity === "critical").length,
      high: vulnerabilities.filter((v) => v.severity === "high").length,
      medium: vulnerabilities.filter((v) => v.severity === "medium").length,
      low: vulnerabilities.filter((v) => v.severity === "low").length,
      info: vulnerabilities.filter((v) => v.severity === "info").length,
    };

    return counts;
  };

  const severityCounts = getSeverityCounts();

  return (
    <Box>
      <Grid container spacing={3}>
        {/* Report Generation */}
        <Grid item xs={12} md={7}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom>
              Generate New Report
            </Typography>
            <Divider sx={{ mb: 3 }} />

            <Grid container spacing={2}>
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  label="Report Name"
                  value={reportName}
                  onChange={(e) => setReportName(e.target.value)}
                  margin="normal"
                  variant="outlined"
                  size="small"
                  placeholder="e.g., Monthly Security Posture - May 2025"
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <FormControl fullWidth margin="normal" size="small">
                  <InputLabel id="report-type-label">Report Type</InputLabel>
                  <Select
                    labelId="report-type-label"
                    value={reportType}
                    onChange={(e) => setReportType(e.target.value)}
                    label="Report Type"
                  >
                    <MenuItem value="" disabled>
                      <em>Select a report type</em>
                    </MenuItem>
                    {reportTypes.map((type) => (
                      <MenuItem key={type.id} value={type.id}>
                        {type.name}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>

              <Grid item xs={12} sm={6}>
                <FormControl fullWidth margin="normal" size="small">
                  <InputLabel id="report-format-label">
                    Report Format
                  </InputLabel>
                  <Select
                    labelId="report-format-label"
                    value={reportFormat}
                    onChange={(e) => setReportFormat(e.target.value)}
                    label="Report Format"
                  >
                    <MenuItem value="pdf">PDF Document</MenuItem>
                    <MenuItem value="xlsx">Excel Spreadsheet</MenuItem>
                    <MenuItem value="csv">CSV File</MenuItem>
                  </Select>
                </FormControl>
              </Grid>

              <Grid item xs={12} sm={6}>
                <LocalizationProvider dateAdapter={AdapterDateFns}>
                  <DatePicker
                    label="Start Date"
                    value={dateRange.start}
                    onChange={(date) =>
                      setDateRange({ ...dateRange, start: date })
                    }
                    slotProps={{
                      textField: {
                        size: "small",
                        fullWidth: true,
                        margin: "normal",
                      },
                    }}
                  />
                </LocalizationProvider>
              </Grid>

              <Grid item xs={12} sm={6}>
                <LocalizationProvider dateAdapter={AdapterDateFns}>
                  <DatePicker
                    label="End Date"
                    value={dateRange.end}
                    onChange={(date) =>
                      setDateRange({ ...dateRange, end: date })
                    }
                    slotProps={{
                      textField: {
                        size: "small",
                        fullWidth: true,
                        margin: "normal",
                      },
                    }}
                  />
                </LocalizationProvider>
              </Grid>

              <Grid item xs={12}>
                <FormControl fullWidth margin="normal" size="small">
                  <InputLabel id="severity-label">
                    Include Severities
                  </InputLabel>
                  <Select
                    labelId="severity-label"
                    multiple
                    value={selectedSeverities}
                    onChange={(e) =>
                      setSelectedSeverities(e.target.value as string[])
                    }
                    label="Include Severities"
                    renderValue={(selected) => (
                      <Box sx={{ display: "flex", flexWrap: "wrap", gap: 0.5 }}>
                        {(selected as string[]).map((value) => (
                          <Chip key={value} label={value} size="small" />
                        ))}
                      </Box>
                    )}
                  >
                    <MenuItem value="critical">
                      Critical ({severityCounts.critical})
                    </MenuItem>
                    <MenuItem value="high">
                      High ({severityCounts.high})
                    </MenuItem>
                    <MenuItem value="medium">
                      Medium ({severityCounts.medium})
                    </MenuItem>
                    <MenuItem value="low">Low ({severityCounts.low})</MenuItem>
                    <MenuItem value="info">
                      Info ({severityCounts.info})
                    </MenuItem>
                  </Select>
                </FormControl>
              </Grid>
            </Grid>

            <Box sx={{ mt: 3, display: "flex", justifyContent: "flex-end" }}>
              <Button
                variant="contained"
                color="primary"
                onClick={handleGenerateReport}
                disabled={!reportType}
              >
                Generate Report
              </Button>
            </Box>
          </Paper>
        </Grid>

        {/* Report Templates and Statistics */}
        <Grid item xs={12} md={5}>
          <Card sx={{ mb: 3 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                Report Templates
              </Typography>
              <Typography variant="body2" color="textSecondary" gutterBottom>
                Quick access to predefined report formats
              </Typography>

              <Grid container spacing={2} sx={{ mt: 1 }}>
                <Grid item xs={6}>
                  <Button
                    variant="outlined"
                    fullWidth
                    onClick={() => {
                      setReportType("executive");
                      setReportName("Executive Summary");
                      setReportFormat("pdf");
                    }}
                    startIcon={<PictureAsPdfIcon />}
                  >
                    Executive Summary
                  </Button>
                </Grid>
                <Grid item xs={6}>
                  <Button
                    variant="outlined"
                    fullWidth
                    onClick={() => {
                      setReportType("detailed");
                      setReportName("Technical Detail Report");
                      setReportFormat("xlsx");
                    }}
                    startIcon={<TableChartIcon />}
                  >
                    Technical Detail
                  </Button>
                </Grid>
                <Grid item xs={6}>
                  <Button
                    variant="outlined"
                    fullWidth
                    onClick={() => {
                      setReportType("remediation");
                      setReportName("Remediation Plan");
                      setReportFormat("pdf");
                    }}
                    startIcon={<PictureAsPdfIcon />}
                  >
                    Remediation Plan
                  </Button>
                </Grid>
                <Grid item xs={6}>
                  <Button
                    variant="outlined"
                    fullWidth
                    onClick={() => {
                      setReportType("compliance");
                      setReportName("Compliance Status");
                      setReportFormat("pdf");
                    }}
                    startIcon={<PictureAsPdfIcon />}
                  >
                    Compliance Status
                  </Button>
                </Grid>
              </Grid>
            </CardContent>
          </Card>

          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                Vulnerability Statistics
              </Typography>
              <Typography variant="body2" color="textSecondary" gutterBottom>
                Summary of current vulnerability status
              </Typography>

              <Grid container spacing={2} sx={{ mt: 1 }}>
                <Grid item xs={6} sm={4}>
                  <Paper
                    sx={{
                      p: 2,
                      textAlign: "center",
                      backgroundColor: theme.palette.error.light,
                    }}
                  >
                    <Typography variant="h4" color="error.dark">
                      {severityCounts.critical}
                    </Typography>
                    <Typography variant="body2" color="error.dark">
                      Critical
                    </Typography>
                  </Paper>
                </Grid>
                <Grid item xs={6} sm={4}>
                  <Paper
                    sx={{
                      p: 2,
                      textAlign: "center",
                      backgroundColor: theme.palette.warning.light,
                    }}
                  >
                    <Typography variant="h4" color="warning.dark">
                      {severityCounts.high}
                    </Typography>
                    <Typography variant="body2" color="warning.dark">
                      High
                    </Typography>
                  </Paper>
                </Grid>
                <Grid item xs={6} sm={4}>
                  <Paper
                    sx={{
                      p: 2,
                      textAlign: "center",
                      backgroundColor: theme.palette.info.light,
                    }}
                  >
                    <Typography variant="h4" color="info.dark">
                      {severityCounts.medium}
                    </Typography>
                    <Typography variant="body2" color="info.dark">
                      Medium
                    </Typography>
                  </Paper>
                </Grid>
                <Grid item xs={6} sm={6}>
                  <Paper
                    sx={{
                      p: 2,
                      textAlign: "center",
                      backgroundColor: theme.palette.success.light,
                    }}
                  >
                    <Typography variant="h4" color="success.dark">
                      {
                        vulnerabilities.filter((v) => v.status === "resolved")
                          .length
                      }
                    </Typography>
                    <Typography variant="body2" color="success.dark">
                      Resolved
                    </Typography>
                  </Paper>
                </Grid>
                <Grid item xs={6} sm={6}>
                  <Paper
                    sx={{
                      p: 2,
                      textAlign: "center",
                      backgroundColor: theme.palette.grey[200],
                    }}
                  >
                    <Typography variant="h4" color="text.secondary">
                      {scanResults.length}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      Scans
                    </Typography>
                  </Paper>
                </Grid>
              </Grid>
            </CardContent>
          </Card>
        </Grid>

        {/* Generated Reports */}
        <Grid item xs={12}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom>
              Generated Reports
            </Typography>
            <Divider sx={{ mb: 3 }} />

            <TableContainer>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Report Name</TableCell>
                    <TableCell>Type</TableCell>
                    <TableCell>Format</TableCell>
                    <TableCell>Created</TableCell>
                    <TableCell>Created By</TableCell>
                    <TableCell>Size</TableCell>
                    <TableCell align="right">Actions</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {reports.map((report) => (
                    <TableRow key={report.id} hover>
                      <TableCell>{report.name}</TableCell>
                      <TableCell>
                        {reportTypes.find((type) => type.id === report.type)
                          ?.name || report.type}
                      </TableCell>
                      <TableCell>
                        <Chip
                          icon={getFormatIcon(report.format)}
                          label={report.format.toUpperCase()}
                          size="small"
                          color={getFormatColor(report.format) as any}
                          variant="outlined"
                        />
                      </TableCell>
                      <TableCell>
                        {format(new Date(report.createdDate), "MMM d, yyyy")}
                      </TableCell>
                      <TableCell>{report.createdBy}</TableCell>
                      <TableCell>{report.size}</TableCell>
                      <TableCell align="right">
                        <Tooltip title="View">
                          <IconButton size="small">
                            <VisibilityIcon fontSize="small" />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Download">
                          <IconButton size="small">
                            <DownloadIcon fontSize="small" />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Email">
                          <IconButton size="small">
                            <EmailIcon fontSize="small" />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Delete">
                          <IconButton
                            size="small"
                            onClick={() => handleDeleteReport(report.id)}
                          >
                            <DeleteIcon fontSize="small" />
                          </IconButton>
                        </Tooltip>
                      </TableCell>
                    </TableRow>
                  ))}
                  {reports.length === 0 && (
                    <TableRow>
                      <TableCell colSpan={7} align="center" sx={{ py: 3 }}>
                        <Typography variant="body1" color="textSecondary">
                          No reports have been generated yet
                        </Typography>
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </TableContainer>
          </Paper>
        </Grid>
      </Grid>
    </Box>
  );
};

export default VulnerabilityReports;
