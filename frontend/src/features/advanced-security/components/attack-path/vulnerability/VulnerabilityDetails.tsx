/**
 * Vulnerability Details Component
 *
 * Displays detailed information about a vulnerability with remediation tracking
 */
import React, { useState } from "react";
import {
  Box,
  Paper,
  Typography,
  Grid,
  Chip,
  Button,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  CircularProgress,
  Alert,
  Divider,
  Link,
  Tooltip,
  Card,
  CardContent,
  CardHeader,
  IconButton,
  Timeline,
  TimelineItem,
  TimelineSeparator,
  TimelineConnector,
  TimelineContent,
  TimelineDot,
  TimelineOppositeContent,
  LinearProgress,
  useTheme,
} from "@mui/material";
import {
  ArrowBack as ArrowBackIcon,
  Save as SaveIcon,
  BugReport as BugReportIcon,
  Security as SecurityIcon,
  Description as DescriptionIcon,
  Link as LinkIcon,
  GetApp as DownloadIcon,
  Code as CodeIcon,
  Assignment as AssignmentIcon,
  CheckCircleOutline as CheckCircleIcon,
} from "@mui/icons-material";

import {
  useGetVulnerabilityQuery,
  useUpdateVulnerabilityStatusMutation,
} from "../../../services/attackPathService";
import {
  Vulnerability,
  VulnerabilitySeverity,
  VulnerabilityStatus,
  RemediationStep,
} from "../../../types/attackPathTypes";

interface VulnerabilityDetailsProps {
  vulnerabilityId: string;
  onBack: () => void;
}

export const VulnerabilityDetails: React.FC<VulnerabilityDetailsProps> = ({
  vulnerabilityId,
  onBack,
}) => {
  const theme = useTheme();

  // Fetch vulnerability details
  const {
    data: vulnerability,
    isLoading,
    error,
  } = useGetVulnerabilityQuery(vulnerabilityId);

  // Status update state
  const [updateStatus, { isLoading: isUpdating }] =
    useUpdateVulnerabilityStatusMutation();

  // Status change dialog state
  const [statusDialogOpen, setStatusDialogOpen] = useState(false);
  const [statusForm, setStatusForm] = useState({
    status: "" as VulnerabilityStatus,
    notes: "",
    assignedTo: "",
  });

  // Get color for severity
  const getSeverityColor = (severity: VulnerabilitySeverity): string => {
    switch (severity) {
      case "CRITICAL":
        return theme.palette.error.dark;
      case "HIGH":
        return theme.palette.error.main;
      case "MEDIUM":
        return theme.palette.warning.main;
      case "LOW":
        return theme.palette.success.main;
      case "INFO":
        return theme.palette.info.main;
      default:
        return theme.palette.grey[500];
    }
  };

  // Get color for CVSS score
  const getCvssColor = (score: number): string => {
    if (score >= 9.0) return theme.palette.error.dark;
    if (score >= 7.0) return theme.palette.error.main;
    if (score >= 4.0) return theme.palette.warning.main;
    if (score >= 0.1) return theme.palette.success.main;
    return theme.palette.grey[500];
  };

  // Format date
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString();
  };

  // Handle status dialog open
  const handleOpenStatusDialog = (initialStatus: VulnerabilityStatus) => {
    setStatusForm({
      status: initialStatus,
      notes: "",
      assignedTo: vulnerability?.assignedTo || "",
    });
    setStatusDialogOpen(true);
  };

  // Handle status form change
  const handleStatusFormChange = (name: string, value: any) => {
    setStatusForm((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  // Handle status update
  const handleUpdateStatus = async () => {
    if (!vulnerability) return;

    try {
      await updateStatus({
        id: vulnerability.id,
        status: statusForm.status,
        notes: statusForm.notes,
        assignedTo: statusForm.assignedTo,
      }).unwrap();

      setStatusDialogOpen(false);
    } catch (error) {
      console.error("Failed to update vulnerability status:", error);
    }
  };

  // Calculate remediation progress
  const calculateRemediationProgress = (steps: RemediationStep[]) => {
    if (!steps || steps.length === 0) return 0;

    const completedSteps = steps.filter((step) => step.completed).length;
    return Math.round((completedSteps / steps.length) * 100);
  };

  if (isLoading) {
    return (
      <Box sx={{ display: "flex", justifyContent: "center", py: 4 }}>
        <CircularProgress />
      </Box>
    );
  }

  if (error || !vulnerability) {
    return (
      <Box>
        <Button startIcon={<ArrowBackIcon />} onClick={onBack} sx={{ mb: 2 }}>
          Back to Vulnerabilities
        </Button>
        <Alert severity="error">
          Error loading vulnerability details. Please try again.
        </Alert>
      </Box>
    );
  }

  const remediationProgress = calculateRemediationProgress(
    vulnerability.remediationSteps
  );

  return (
    <Box>
      {/* Header */}
      <Box
        sx={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          mb: 3,
        }}
      >
        <Button startIcon={<ArrowBackIcon />} onClick={onBack}>
          Back to Vulnerabilities
        </Button>
        <Box>
          {vulnerability.status === "OPEN" && (
            <Button
              variant="contained"
              color="warning"
              startIcon={<AssignmentIcon />}
              onClick={() => handleOpenStatusDialog("IN_PROGRESS")}
              sx={{ mr: 1 }}
            >
              Start Remediation
            </Button>
          )}

          {vulnerability.status === "IN_PROGRESS" && (
            <Button
              variant="contained"
              color="success"
              startIcon={<CheckCircleIcon />}
              onClick={() => handleOpenStatusDialog("FIXED")}
              sx={{ mr: 1 }}
            >
              Mark as Fixed
            </Button>
          )}

          <Button
            variant="outlined"
            startIcon={<DescriptionIcon />}
            onClick={() => {
              // Generate PDF report logic would go here
              console.log("Generate report for", vulnerability.id);
            }}
          >
            Generate Report
          </Button>
        </Box>
      </Box>

      {/* Summary Card */}
      <Paper sx={{ p: 3, mb: 3 }}>
        <Grid container spacing={3}>
          <Grid item xs={12} md={9}>
            <Typography variant="h5" gutterBottom>
              {vulnerability.name}
            </Typography>
            <Box
              sx={{
                display: "flex",
                alignItems: "center",
                flexWrap: "wrap",
                gap: 1,
                mb: 2,
              }}
            >
              <Chip label={vulnerability.cveId} size="small" color="primary" />
              <Chip
                label={vulnerability.severity}
                size="small"
                sx={{
                  bgcolor: getSeverityColor(vulnerability.severity),
                  color: "white",
                }}
              />
              <Chip
                label={`CVSS: ${vulnerability.cvssScore.toFixed(1)}`}
                size="small"
                sx={{
                  bgcolor: getCvssColor(vulnerability.cvssScore),
                  color: "white",
                }}
              />
              <Chip
                label={vulnerability.status}
                size="small"
                color={
                  vulnerability.status === "OPEN"
                    ? "error"
                    : vulnerability.status === "IN_PROGRESS"
                    ? "warning"
                    : vulnerability.status === "FIXED"
                    ? "success"
                    : "default"
                }
              />
            </Box>
            <Typography variant="body1" gutterBottom>
              {vulnerability.description}
            </Typography>
            <Grid container spacing={2} sx={{ mt: 1 }}>
              <Grid item xs={12} sm={6} md={4}>
                <Typography variant="body2" color="textSecondary">
                  <strong>Affected Asset:</strong> {vulnerability.assetName}
                </Typography>
              </Grid>
              <Grid item xs={12} sm={6} md={4}>
                <Typography variant="body2" color="textSecondary">
                  <strong>Discovered:</strong>{" "}
                  {formatDate(vulnerability.discoveredDate)}
                </Typography>
              </Grid>
              <Grid item xs={12} sm={6} md={4}>
                <Typography variant="body2" color="textSecondary">
                  <strong>Last Updated:</strong>{" "}
                  {formatDate(vulnerability.lastUpdatedDate)}
                </Typography>
              </Grid>
              {vulnerability.assignedTo && (
                <Grid item xs={12} sm={6} md={4}>
                  <Typography variant="body2" color="textSecondary">
                    <strong>Assigned To:</strong> {vulnerability.assignedTo}
                  </Typography>
                </Grid>
              )}
            </Grid>
          </Grid>
          <Grid item xs={12} md={3}>
            <Card variant="outlined">
              <CardHeader title="Remediation Progress" />
              <CardContent>
                <Box sx={{ display: "flex", alignItems: "center", mb: 1 }}>
                  <Box sx={{ width: "100%", mr: 1 }}>
                    <LinearProgress
                      variant="determinate"
                      value={remediationProgress}
                      color={
                        remediationProgress === 100
                          ? "success"
                          : remediationProgress > 50
                          ? "warning"
                          : "error"
                      }
                      sx={{ height: 10, borderRadius: 5 }}
                    />
                  </Box>
                  <Typography variant="body2" color="textSecondary">
                    {remediationProgress}%
                  </Typography>
                </Box>
                <Typography variant="caption" color="textSecondary">
                  {vulnerability.remediationSteps?.filter(
                    (step) => step.completed
                  ).length || 0}{" "}
                  of {vulnerability.remediationSteps?.length || 0} steps
                  completed
                </Typography>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      </Paper>

      {/* Technical Details */}
      <Grid container spacing={3} sx={{ mb: 3 }}>
        <Grid item xs={12} md={6}>
          <Paper sx={{ p: 2, height: "100%" }}>
            <Typography variant="h6" gutterBottom>
              Technical Details
            </Typography>
            <Divider sx={{ mb: 2 }} />
            <Grid container spacing={1}>
              <Grid item xs={4}>
                <Typography variant="body2" color="textSecondary">
                  Attack Vector:
                </Typography>
              </Grid>
              <Grid item xs={8}>
                <Typography variant="body2">
                  {vulnerability.attackVector}
                </Typography>
              </Grid>
              <Grid item xs={4}>
                <Typography variant="body2" color="textSecondary">
                  Attack Complexity:
                </Typography>
              </Grid>
              <Grid item xs={8}>
                <Typography variant="body2">
                  {vulnerability.attackComplexity}
                </Typography>
              </Grid>
              <Grid item xs={4}>
                <Typography variant="body2" color="textSecondary">
                  Privileges Required:
                </Typography>
              </Grid>
              <Grid item xs={8}>
                <Typography variant="body2">
                  {vulnerability.privilegesRequired}
                </Typography>
              </Grid>
              <Grid item xs={4}>
                <Typography variant="body2" color="textSecondary">
                  User Interaction:
                </Typography>
              </Grid>
              <Grid item xs={8}>
                <Typography variant="body2">
                  {vulnerability.userInteraction}
                </Typography>
              </Grid>
              <Grid item xs={4}>
                <Typography variant="body2" color="textSecondary">
                  Scope:
                </Typography>
              </Grid>
              <Grid item xs={8}>
                <Typography variant="body2">{vulnerability.scope}</Typography>
              </Grid>
              <Grid item xs={4}>
                <Typography variant="body2" color="textSecondary">
                  Confidentiality Impact:
                </Typography>
              </Grid>
              <Grid item xs={8}>
                <Typography variant="body2">
                  {vulnerability.confidentialityImpact}
                </Typography>
              </Grid>
              <Grid item xs={4}>
                <Typography variant="body2" color="textSecondary">
                  Integrity Impact:
                </Typography>
              </Grid>
              <Grid item xs={8}>
                <Typography variant="body2">
                  {vulnerability.integrityImpact}
                </Typography>
              </Grid>
              <Grid item xs={4}>
                <Typography variant="body2" color="textSecondary">
                  Availability Impact:
                </Typography>
              </Grid>
              <Grid item xs={8}>
                <Typography variant="body2">
                  {vulnerability.availabilityImpact}
                </Typography>
              </Grid>
            </Grid>
          </Paper>
        </Grid>

        <Grid item xs={12} md={6}>
          <Paper sx={{ p: 2, height: "100%" }}>
            <Typography variant="h6" gutterBottom>
              References
            </Typography>
            <Divider sx={{ mb: 2 }} />
            {vulnerability.references && vulnerability.references.length > 0 ? (
              <Box sx={{ display: "flex", flexDirection: "column", gap: 1 }}>
                {vulnerability.references.map((reference, index) => (
                  <Box
                    key={index}
                    sx={{ display: "flex", alignItems: "center" }}
                  >
                    <LinkIcon
                      fontSize="small"
                      sx={{ mr: 1, color: theme.palette.primary.main }}
                    />
                    <Link
                      href={reference.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      underline="hover"
                    >
                      {reference.title || reference.url}
                    </Link>
                  </Box>
                ))}
              </Box>
            ) : (
              <Typography variant="body2" color="textSecondary">
                No references available
              </Typography>
            )}
          </Paper>
        </Grid>
      </Grid>

      {/* Remediation Steps */}
      <Paper sx={{ p: 2, mb: 3 }}>
        <Typography variant="h6" gutterBottom>
          Remediation Steps
        </Typography>
        <Divider sx={{ mb: 2 }} />

        {vulnerability.remediationSteps &&
        vulnerability.remediationSteps.length > 0 ? (
          <Timeline position="right">
            {vulnerability.remediationSteps.map((step, index) => (
              <TimelineItem key={index}>
                <TimelineOppositeContent
                  color="textSecondary"
                  sx={{ flex: 0.2 }}
                >
                  {step.completed
                    ? formatDate(step.completedDate || "")
                    : "Pending"}
                </TimelineOppositeContent>
                <TimelineSeparator>
                  <TimelineDot
                    color={step.completed ? "success" : "grey"}
                    variant={step.completed ? "filled" : "outlined"}
                  />
                  {index < vulnerability.remediationSteps.length - 1 && (
                    <TimelineConnector />
                  )}
                </TimelineSeparator>
                <TimelineContent>
                  <Box sx={{ mb: 1 }}>
                    <Typography variant="subtitle2" component="span">
                      {step.title}
                    </Typography>
                    {step.completed && (
                      <Chip
                        label="Completed"
                        size="small"
                        color="success"
                        sx={{ ml: 1 }}
                      />
                    )}
                  </Box>
                  <Typography variant="body2" gutterBottom>
                    {step.description}
                  </Typography>
                </TimelineContent>
              </TimelineItem>
            ))}
          </Timeline>
        ) : (
          <Typography variant="body2" color="textSecondary">
            No remediation steps available
          </Typography>
        )}
      </Paper>

      {/* Status History */}
      <Paper sx={{ p: 2 }}>
        <Typography variant="h6" gutterBottom>
          Status History
        </Typography>
        <Divider sx={{ mb: 2 }} />

        {vulnerability.statusHistory &&
        vulnerability.statusHistory.length > 0 ? (
          <Timeline position="alternate">
            {vulnerability.statusHistory.map((history, index) => (
              <TimelineItem key={index}>
                <TimelineOppositeContent color="textSecondary">
                  {formatDate(history.date)}
                </TimelineOppositeContent>
                <TimelineSeparator>
                  <TimelineDot
                    color={
                      history.status === "OPEN"
                        ? "error"
                        : history.status === "IN_PROGRESS"
                        ? "warning"
                        : history.status === "FIXED"
                        ? "success"
                        : "grey"
                    }
                  />
                  {index < vulnerability.statusHistory.length - 1 && (
                    <TimelineConnector />
                  )}
                </TimelineSeparator>
                <TimelineContent>
                  <Typography variant="subtitle2" component="span">
                    Status changed to {history.status}
                  </Typography>
                  {history.assignedTo && (
                    <Typography variant="body2" gutterBottom>
                      Assigned to: {history.assignedTo}
                    </Typography>
                  )}
                  {history.notes && (
                    <Typography variant="body2" color="textSecondary">
                      {history.notes}
                    </Typography>
                  )}
                </TimelineContent>
              </TimelineItem>
            ))}
          </Timeline>
        ) : (
          <Typography variant="body2" color="textSecondary">
            No status history available
          </Typography>
        )}
      </Paper>

      {/* Status Update Dialog */}
      <Dialog
        open={statusDialogOpen}
        onClose={() => setStatusDialogOpen(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>Update Vulnerability Status</DialogTitle>
        <DialogContent dividers>
          <Grid container spacing={2}>
            <Grid item xs={12}>
              <FormControl fullWidth margin="normal">
                <InputLabel>Status</InputLabel>
                <Select
                  value={statusForm.status}
                  onChange={(e) =>
                    handleStatusFormChange("status", e.target.value)
                  }
                  label="Status"
                >
                  {Object.values(VulnerabilityStatus).map((status) => (
                    <MenuItem
                      key={status}
                      value={status}
                      disabled={status === vulnerability.status}
                    >
                      {status}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Assigned To"
                value={statusForm.assignedTo}
                onChange={(e) =>
                  handleStatusFormChange("assignedTo", e.target.value)
                }
                margin="normal"
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Notes"
                value={statusForm.notes}
                onChange={(e) =>
                  handleStatusFormChange("notes", e.target.value)
                }
                multiline
                rows={4}
                margin="normal"
                placeholder="Add notes about this status change"
              />
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setStatusDialogOpen(false)}>Cancel</Button>
          <Button
            variant="contained"
            startIcon={<SaveIcon />}
            onClick={handleUpdateStatus}
            disabled={
              isUpdating ||
              !statusForm.status ||
              statusForm.status === vulnerability.status
            }
          >
            Update Status
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};
