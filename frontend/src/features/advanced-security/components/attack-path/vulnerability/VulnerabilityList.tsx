/**
 * Vulnerability List Component
 *
 * Displays a list of vulnerabilities with filtering and searching capabilities
 */
import React, { useState } from "react";
import {
  Box,
  Paper,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TablePagination,
  Chip,
  IconButton,
  CircularProgress,
  Alert,
  Tooltip,
  useTheme,
} from "@mui/material";
import {
  InfoOutlined as InfoIcon,
  Assignment as AssignmentIcon,
  Check as CheckIcon,
  ErrorOutline as ErrorIcon,
} from "@mui/icons-material";

import { useGetVulnerabilitiesQuery } from "../../../services/attackPathService";
import {
  Vulnerability,
  VulnerabilitySeverity,
  VulnerabilityStatus,
} from "../../../types/attackPathTypes";

interface VulnerabilityListProps {
  filters: {
    search: string;
    severity: VulnerabilitySeverity[];
    status: VulnerabilityStatus[];
    cvssMin: number;
    cvssMax: number;
    assetIds: string[];
  };
  onViewDetails: (vulnerability: Vulnerability) => void;
}

export const VulnerabilityList: React.FC<VulnerabilityListProps> = ({
  filters,
  onViewDetails,
}) => {
  const theme = useTheme();

  // Pagination state
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);

  // Fetch vulnerabilities
  const {
    data: vulnerabilities = [],
    isLoading,
    error,
  } = useGetVulnerabilitiesQuery();

  // Handle pagination change
  const handleChangePage = (event: unknown, newPage: number) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  // Apply filters
  const filteredVulnerabilities = vulnerabilities.filter((vuln) => {
    // Search filter
    if (
      filters.search &&
      !vuln.name.toLowerCase().includes(filters.search.toLowerCase()) &&
      !vuln.description.toLowerCase().includes(filters.search.toLowerCase()) &&
      !vuln.cveId.toLowerCase().includes(filters.search.toLowerCase())
    ) {
      return false;
    }

    // Severity filter
    if (
      filters.severity.length > 0 &&
      !filters.severity.includes(vuln.severity)
    ) {
      return false;
    }

    // Status filter
    if (filters.status.length > 0 && !filters.status.includes(vuln.status)) {
      return false;
    }

    // CVSS score filter
    if (vuln.cvssScore < filters.cvssMin || vuln.cvssScore > filters.cvssMax) {
      return false;
    }

    // Asset filter
    if (
      filters.assetIds.length > 0 &&
      !filters.assetIds.includes(vuln.assetId)
    ) {
      return false;
    }

    return true;
  });

  // Get paginated vulnerabilities
  const paginatedVulnerabilities = filteredVulnerabilities.slice(
    page * rowsPerPage,
    page * rowsPerPage + rowsPerPage
  );

  // Get color for severity
  const getSeverityColor = (severity: VulnerabilitySeverity): string => {
    switch (severity) {
      case "CRITICAL":
        return theme.palette.error.dark;
      case "HIGH":
        return theme.palette.error.main;
      case "MEDIUM":
        return theme.palette.warning.main;
      case "LOW":
        return theme.palette.success.main;
      case "INFO":
        return theme.palette.info.main;
      default:
        return theme.palette.grey[500];
    }
  };

  // Get color for CVSS score
  const getCvssColor = (score: number): string => {
    if (score >= 9.0) return theme.palette.error.dark;
    if (score >= 7.0) return theme.palette.error.main;
    if (score >= 4.0) return theme.palette.warning.main;
    if (score >= 0.1) return theme.palette.success.main;
    return theme.palette.grey[500];
  };

  // Format date
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString();
  };

  if (isLoading) {
    return (
      <Box sx={{ display: "flex", justifyContent: "center", py: 4 }}>
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Alert severity="error" sx={{ mb: 2 }}>
        Error loading vulnerabilities. Please try again.
      </Alert>
    );
  }

  return (
    <Paper>
      <TableContainer>
        <Table sx={{ minWidth: 650 }}>
          <TableHead>
            <TableRow>
              <TableCell>CVE ID</TableCell>
              <TableCell>Name</TableCell>
              <TableCell>Severity</TableCell>
              <TableCell>CVSS Score</TableCell>
              <TableCell>Affected Asset</TableCell>
              <TableCell>Discovered</TableCell>
              <TableCell>Status</TableCell>
              <TableCell align="right">Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {paginatedVulnerabilities.length === 0 ? (
              <TableRow>
                <TableCell colSpan={8} align="center">
                  <Typography
                    variant="body2"
                    color="textSecondary"
                    sx={{ py: 3 }}
                  >
                    No vulnerabilities found
                  </Typography>
                </TableCell>
              </TableRow>
            ) : (
              paginatedVulnerabilities.map((vulnerability) => (
                <TableRow key={vulnerability.id} hover>
                  <TableCell>
                    <Typography variant="body2" fontWeight="medium">
                      {vulnerability.cveId}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Typography variant="body2" noWrap sx={{ maxWidth: 200 }}>
                      {vulnerability.name}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Chip
                      label={vulnerability.severity}
                      size="small"
                      sx={{
                        bgcolor: getSeverityColor(vulnerability.severity),
                        color: "white",
                      }}
                    />
                  </TableCell>
                  <TableCell>
                    <Chip
                      label={vulnerability.cvssScore.toFixed(1)}
                      size="small"
                      sx={{
                        bgcolor: getCvssColor(vulnerability.cvssScore),
                        color: "white",
                      }}
                    />
                  </TableCell>
                  <TableCell>
                    <Typography variant="body2">
                      {vulnerability.assetName}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    {formatDate(vulnerability.discoveredDate)}
                  </TableCell>
                  <TableCell>
                    <Chip
                      label={vulnerability.status}
                      size="small"
                      color={
                        vulnerability.status === "OPEN"
                          ? "error"
                          : vulnerability.status === "IN_PROGRESS"
                          ? "warning"
                          : vulnerability.status === "FIXED"
                          ? "success"
                          : "default"
                      }
                    />
                  </TableCell>
                  <TableCell align="right">
                    <Tooltip title="View Details">
                      <IconButton
                        size="small"
                        onClick={() => onViewDetails(vulnerability)}
                      >
                        <InfoIcon fontSize="small" />
                      </IconButton>
                    </Tooltip>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </TableContainer>
      <TablePagination
        rowsPerPageOptions={[10, 25, 50, 100]}
        component="div"
        count={filteredVulnerabilities.length}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={handleChangePage}
        onRowsPerPageChange={handleChangeRowsPerPage}
      />
    </Paper>
  );
};
