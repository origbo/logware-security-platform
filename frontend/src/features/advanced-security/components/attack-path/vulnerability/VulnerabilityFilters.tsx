/**
 * Vulnerability Filters Component
 *
 * Provides filtering and searching capabilities for the vulnerability management
 */
import React, { useState, useEffect } from "react";
import {
  Box,
  Paper,
  Typography,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Chip,
  OutlinedInput,
  Slider,
  Button,
  Grid,
  IconButton,
  Tooltip,
  Collapse,
  useTheme,
} from "@mui/material";
import {
  Search as SearchIcon,
  FilterList as FilterListIcon,
  ClearAll as ClearAllIcon,
  ExpandMore as ExpandMoreIcon,
  ExpandLess as ExpandLessIcon,
} from "@mui/icons-material";

import { useGetAssetsQuery } from "../../../services/attackPathService";
import {
  VulnerabilitySeverity,
  VulnerabilityStatus,
  Asset,
} from "../../../types/attackPathTypes";

interface VulnerabilityFiltersProps {
  filters: {
    search: string;
    severity: VulnerabilitySeverity[];
    status: VulnerabilityStatus[];
    cvssMin: number;
    cvssMax: number;
    assetIds: string[];
  };
  onFiltersChange: (filters: any) => void;
}

export const VulnerabilityFilters: React.FC<VulnerabilityFiltersProps> = ({
  filters,
  onFiltersChange,
}) => {
  const theme = useTheme();

  // Local state
  const [expanded, setExpanded] = useState(false);
  const [localFilters, setLocalFilters] = useState(filters);

  // Fetch assets for filter dropdown
  const { data: assets = [] } = useGetAssetsQuery();

  // Update local filters when props change
  useEffect(() => {
    setLocalFilters(filters);
  }, [filters]);

  // Handle search input change
  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const newFilters = {
      ...localFilters,
      search: event.target.value,
    };

    setLocalFilters(newFilters);
    onFiltersChange(newFilters);
  };

  // Handle severity selection change
  const handleSeverityChange = (
    event: React.ChangeEvent<{ value: unknown }>
  ) => {
    const value = event.target.value as VulnerabilitySeverity[];

    const newFilters = {
      ...localFilters,
      severity: value,
    };

    setLocalFilters(newFilters);
    onFiltersChange(newFilters);
  };

  // Handle status selection change
  const handleStatusChange = (event: React.ChangeEvent<{ value: unknown }>) => {
    const value = event.target.value as VulnerabilityStatus[];

    const newFilters = {
      ...localFilters,
      status: value,
    };

    setLocalFilters(newFilters);
    onFiltersChange(newFilters);
  };

  // Handle CVSS score range change
  const handleCvssChange = (event: any, newValue: number | number[]) => {
    const [min, max] = newValue as number[];

    const newFilters = {
      ...localFilters,
      cvssMin: min,
      cvssMax: max,
    };

    setLocalFilters(newFilters);
  };

  // Handle CVSS score range change commit
  const handleCvssChangeCommitted = (
    event: any,
    newValue: number | number[]
  ) => {
    const [min, max] = newValue as number[];

    const newFilters = {
      ...localFilters,
      cvssMin: min,
      cvssMax: max,
    };

    onFiltersChange(newFilters);
  };

  // Handle asset selection change
  const handleAssetChange = (event: React.ChangeEvent<{ value: unknown }>) => {
    const value = event.target.value as string[];

    const newFilters = {
      ...localFilters,
      assetIds: value,
    };

    setLocalFilters(newFilters);
    onFiltersChange(newFilters);
  };

  // Handle reset filters
  const handleResetFilters = () => {
    const resetFilters = {
      search: "",
      severity: [],
      status: [],
      cvssMin: 0,
      cvssMax: 10,
      assetIds: [],
    };

    setLocalFilters(resetFilters);
    onFiltersChange(resetFilters);
  };

  // Get severity label with count
  const getSeverityLabel = (severity: VulnerabilitySeverity): string => {
    return `${severity}`;
  };

  // Get status label with count
  const getStatusLabel = (status: VulnerabilityStatus): string => {
    return `${status}`;
  };

  // Get asset label
  const getAssetLabel = (assetId: string): string => {
    const asset = assets.find((a: Asset) => a.id === assetId);
    return asset ? asset.name : "Unknown Asset";
  };

  // Get CVSS value text
  const getCvssValueText = (value: number) => {
    return `${value}`;
  };

  return (
    <Paper sx={{ p: 2, mb: 3 }}>
      <Box
        sx={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          mb: 2,
        }}
      >
        <Box sx={{ display: "flex", alignItems: "center" }}>
          <FilterListIcon sx={{ mr: 1, color: theme.palette.primary.main }} />
          <Typography variant="h6">Filters</Typography>
        </Box>
        <Box>
          <Tooltip title="Reset Filters">
            <IconButton onClick={handleResetFilters} size="small">
              <ClearAllIcon />
            </IconButton>
          </Tooltip>
          <Tooltip title={expanded ? "Collapse Filters" : "Expand Filters"}>
            <IconButton onClick={() => setExpanded(!expanded)} size="small">
              {expanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}
            </IconButton>
          </Tooltip>
        </Box>
      </Box>

      {/* Search Field - Always Visible */}
      <Box sx={{ mb: 2 }}>
        <TextField
          fullWidth
          placeholder="Search vulnerabilities by name, description, or CVE ID..."
          variant="outlined"
          size="small"
          value={localFilters.search}
          onChange={handleSearchChange}
          InputProps={{
            startAdornment: (
              <SearchIcon sx={{ color: "action.active", mr: 1 }} />
            ),
          }}
        />
      </Box>

      {/* Expandable Filters */}
      <Collapse in={expanded}>
        <Grid container spacing={2}>
          {/* Severity Filter */}
          <Grid item xs={12} md={6}>
            <FormControl fullWidth size="small">
              <InputLabel id="severity-label">Severity</InputLabel>
              <Select
                labelId="severity-label"
                multiple
                value={localFilters.severity}
                onChange={handleSeverityChange as any}
                input={<OutlinedInput label="Severity" />}
                renderValue={(selected) => (
                  <Box sx={{ display: "flex", flexWrap: "wrap", gap: 0.5 }}>
                    {(selected as VulnerabilitySeverity[]).map((value) => (
                      <Chip
                        key={value}
                        label={getSeverityLabel(value)}
                        size="small"
                        sx={{
                          bgcolor:
                            value === "CRITICAL"
                              ? theme.palette.error.dark
                              : value === "HIGH"
                              ? theme.palette.error.main
                              : value === "MEDIUM"
                              ? theme.palette.warning.main
                              : value === "LOW"
                              ? theme.palette.success.main
                              : value === "INFO"
                              ? theme.palette.info.main
                              : theme.palette.grey[500],
                          color: "white",
                        }}
                      />
                    ))}
                  </Box>
                )}
              >
                {Object.values(VulnerabilitySeverity).map((severity) => (
                  <MenuItem key={severity} value={severity}>
                    {getSeverityLabel(severity)}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Grid>

          {/* Status Filter */}
          <Grid item xs={12} md={6}>
            <FormControl fullWidth size="small">
              <InputLabel id="status-label">Status</InputLabel>
              <Select
                labelId="status-label"
                multiple
                value={localFilters.status}
                onChange={handleStatusChange as any}
                input={<OutlinedInput label="Status" />}
                renderValue={(selected) => (
                  <Box sx={{ display: "flex", flexWrap: "wrap", gap: 0.5 }}>
                    {(selected as VulnerabilityStatus[]).map((value) => (
                      <Chip
                        key={value}
                        label={getStatusLabel(value)}
                        size="small"
                        color={
                          value === "OPEN"
                            ? "error"
                            : value === "IN_PROGRESS"
                            ? "warning"
                            : value === "FIXED"
                            ? "success"
                            : "default"
                        }
                      />
                    ))}
                  </Box>
                )}
              >
                {Object.values(VulnerabilityStatus).map((status) => (
                  <MenuItem key={status} value={status}>
                    {getStatusLabel(status)}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Grid>

          {/* CVSS Score Range */}
          <Grid item xs={12}>
            <Box sx={{ px: 2, pb: 1, pt: 2 }}>
              <Typography id="cvss-slider-label" gutterBottom>
                CVSS Score Range: {localFilters.cvssMin.toFixed(1)} -{" "}
                {localFilters.cvssMax.toFixed(1)}
              </Typography>
              <Slider
                value={[localFilters.cvssMin, localFilters.cvssMax]}
                onChange={handleCvssChange}
                onChangeCommitted={handleCvssChangeCommitted}
                valueLabelDisplay="auto"
                aria-labelledby="cvss-slider-label"
                getAriaValueText={getCvssValueText}
                min={0}
                max={10}
                step={0.1}
                marks={[
                  { value: 0, label: "0" },
                  { value: 2.5, label: "2.5" },
                  { value: 5, label: "5" },
                  { value: 7.5, label: "7.5" },
                  { value: 10, label: "10" },
                ]}
              />
            </Box>
          </Grid>

          {/* Asset Filter */}
          <Grid item xs={12}>
            <FormControl fullWidth size="small">
              <InputLabel id="asset-label">Affected Assets</InputLabel>
              <Select
                labelId="asset-label"
                multiple
                value={localFilters.assetIds}
                onChange={handleAssetChange as any}
                input={<OutlinedInput label="Affected Assets" />}
                renderValue={(selected) => (
                  <Box sx={{ display: "flex", flexWrap: "wrap", gap: 0.5 }}>
                    {(selected as string[]).map((value) => (
                      <Chip
                        key={value}
                        label={getAssetLabel(value)}
                        size="small"
                      />
                    ))}
                  </Box>
                )}
              >
                {assets.map((asset: Asset) => (
                  <MenuItem key={asset.id} value={asset.id}>
                    {asset.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Grid>
        </Grid>
      </Collapse>
    </Paper>
  );
};
