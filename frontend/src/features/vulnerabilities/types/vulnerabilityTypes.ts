/**
 * Vulnerability Types
 *
 * Type definitions for vulnerability management in the Logware Security Platform
 */

// Vulnerability severity levels
export enum VulnerabilitySeverity {
  CRITICAL = "CRITICAL",
  HIGH = "HIGH",
  MEDIUM = "MEDIUM",
  LOW = "LOW",
  INFORMATIONAL = "INFORMATIONAL",
}

// Vulnerability status values
export enum VulnerabilityStatus {
  OPEN = "OPEN",
  IN_PROGRESS = "IN_PROGRESS",
  MITIGATED = "MITIGATED",
  REMEDIATED = "REMEDIATED",
  ACCEPTED = "ACCEPTED",
  FALSE_POSITIVE = "FALSE_POSITIVE",
}

// Vulnerability source systems
export enum VulnerabilitySource {
  SCANNER = "SCANNER",
  PENETRATION_TEST = "PENETRATION_TEST",
  THREAT_INTEL = "THREAT_INTEL",
  CODE_SCAN = "CODE_SCAN",
  MANUAL = "MANUAL",
  BUG_BOUNTY = "BUG_BOUNTY",
  THIRD_PARTY = "THIRD_PARTY",
}

// Remediation action
export interface RemediationAction {
  id?: string;
  description: string;
  type: "patch" | "configuration" | "replacement" | "upgrade" | "other";
  effort: "low" | "medium" | "high";
  status: "planned" | "in_progress" | "completed";
  assignedTo?: string;
  estimatedCompletionDate?: string;
  actualCompletionDate?: string;
  notes?: string;
}

// Vulnerability verification result
export interface VerificationResult {
  timestamp: string;
  verified: boolean;
  verifiedBy: string;
  notes?: string;
  evidenceLinks?: string[];
}

// Main Vulnerability interface
export interface Vulnerability {
  id: string;
  title: string;
  description: string;
  severity: VulnerabilitySeverity;
  status: VulnerabilityStatus;
  source: VulnerabilitySource;
  cve?: string;
  cvss?: number;
  cvssVector?: string;
  cwe?: string;
  discoveredAt: string;
  lastUpdatedAt?: string;
  remediatedAt?: string;
  affectedSystems: string[];
  affectedComponents?: string[];
  exploitAvailable: boolean;
  exploitabilityScore?: number;
  impactScore?: number;
  tags?: string[];
  assignedTo?: string;
  remediation?: RemediationAction;
  verification?: VerificationResult;
  references?: string[];
  notes?: string;
  threatCategory?: string[];
  falsePositiveReason?: string;
  riskAcceptanceReason?: string;
  riskAcceptanceExpiryDate?: string;
  riskAcceptanceApprovedBy?: string;
  relatedAlerts?: string[];
  patchAvailable?: boolean;
  patchLink?: string;
}

// Interface for updating a vulnerability
export interface VulnerabilityUpdate {
  status?: VulnerabilityStatus;
  severity?: VulnerabilitySeverity;
  assignedTo?: string;
  tags?: string[];
  notes?: string;
  remediation?: Partial<RemediationAction>;
  falsePositiveReason?: string;
  riskAcceptanceReason?: string;
  riskAcceptanceExpiryDate?: string;
  riskAcceptanceApprovedBy?: string;
}

// Interface for bulk updating vulnerabilities
export interface BulkVulnerabilityUpdate {
  ids: string[];
  updates: VulnerabilityUpdate;
}

// Vulnerability filter parameters for API queries
export interface VulnerabilityQueryParams {
  severity?: VulnerabilitySeverity[];
  status?: VulnerabilityStatus[];
  source?: VulnerabilitySource[];
  cve?: string;
  cwe?: string;
  cvssMin?: number;
  cvssMax?: number;
  discoveredStartDate?: string;
  discoveredEndDate?: string;
  exploitAvailable?: boolean;
  patchAvailable?: boolean;
  searchTerm?: string;
  assignedTo?: string;
  affectedSystem?: string;
  tags?: string[];
  limit?: number;
  page?: number;
}

// Vulnerability statistics interface
export interface VulnerabilityStats {
  bySeverity: Record<string, number>;
  byStatus: Record<string, number>;
  bySource: Record<string, number>;
  bySystem: Record<string, number>;
  totalOpen: number;
  totalRemediated: number;
  averageRemediationTime: number;
  openLongerThan30Days: number;
  openLongerThan90Days: number;
  criticalWithExploit: number;
}
