/**
 * VulnerabilityScanDialog Component
 *
 * Dialog for configuring and initiating vulnerability scans.
 */
import React, { useState } from "react";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  FormHelperText,
  Typography,
  Grid,
  CircularProgress,
  Divider,
  Box,
  Alert,
  IconButton,
  RadioGroup,
  Radio,
  FormControlLabel,
  Tooltip,
  useTheme,
  SelectChangeEvent,
} from "@mui/material";
import {
  Security as SecurityIcon,
  Close as CloseIcon,
  Help as HelpIcon,
  AddCircleOutline as AddIcon,
} from "@mui/icons-material";

// Interface for component props
interface VulnerabilityScanDialogProps {
  open: boolean;
  onClose: () => void;
  onStartScan: (target: string, scanType: string) => void;
  isLoading: boolean;
}

const VulnerabilityScanDialog: React.FC<VulnerabilityScanDialogProps> = ({
  open,
  onClose,
  onStartScan,
  isLoading,
}) => {
  const theme = useTheme();

  // State for scan configuration
  const [scanConfig, setScanConfig] = useState({
    target: "",
    targetType: "ip",
    scanType: "full",
    credentials: false,
    username: "",
    password: "",
    options: {
      portRange: "1-1024",
      intensity: "normal",
    },
  });

  // State for validation errors
  const [errors, setErrors] = useState<{
    target?: string;
    credentials?: string;
  }>({});

  // State for advanced options
  const [showAdvancedOptions, setShowAdvancedOptions] = useState(false);

  // Handle changes to scan config
  const handleScanConfigChange = (field: string, value: any) => {
    setScanConfig((prev) => ({
      ...prev,
      [field]: value,
    }));

    // Clear errors when field is changed
    if (errors[field]) {
      setErrors((prev) => ({
        ...prev,
        [field]: undefined,
      }));
    }
  };

  // Handle changes to nested options
  const handleOptionsChange = (field: string, value: any) => {
    setScanConfig((prev) => ({
      ...prev,
      options: {
        ...prev.options,
        [field]: value,
      },
    }));
  };

  // Handle scan type change
  const handleScanTypeChange = (event: SelectChangeEvent<string>) => {
    handleScanConfigChange("scanType", event.target.value);
  };

  // Handle target type change
  const handleTargetTypeChange = (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    handleScanConfigChange(
      "targetType",
      (event.target as HTMLInputElement).value
    );
  };

  // Handle credentials toggle
  const handleCredentialsToggle = (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    handleScanConfigChange("credentials", event.target.checked);
  };

  // Validate the form
  const validateForm = (): boolean => {
    const newErrors: { target?: string; credentials?: string } = {};
    let isValid = true;

    // Validate target
    if (!scanConfig.target.trim()) {
      newErrors.target = "Target is required";
      isValid = false;
    } else if (
      scanConfig.targetType === "ip" &&
      !isValidIpOrCidr(scanConfig.target)
    ) {
      newErrors.target = "Invalid IP address or CIDR notation";
      isValid = false;
    } else if (
      scanConfig.targetType === "hostname" &&
      !isValidHostname(scanConfig.target)
    ) {
      newErrors.target = "Invalid hostname";
      isValid = false;
    }

    // Validate credentials if enabled
    if (scanConfig.credentials) {
      if (!scanConfig.username.trim() || !scanConfig.password.trim()) {
        newErrors.credentials = "Both username and password are required";
        isValid = false;
      }
    }

    setErrors(newErrors);
    return isValid;
  };

  // Simple IP validation
  const isValidIpOrCidr = (value: string): boolean => {
    // Basic IPv4 or CIDR regex
    const ipv4Regex =
      /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\/(3[0-2]|[1-2][0-9]|[0-9]))?$/;
    return ipv4Regex.test(value);
  };

  // Simple hostname validation
  const isValidHostname = (value: string): boolean => {
    // Basic hostname regex (not perfect but good enough for UI validation)
    const hostnameRegex =
      /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$/;
    return hostnameRegex.test(value);
  };

  // Handle form submission
  const handleStartScan = () => {
    if (validateForm()) {
      onStartScan(scanConfig.target, scanConfig.scanType);
    }
  };

  // Reset form
  const handleReset = () => {
    setScanConfig({
      target: "",
      targetType: "ip",
      scanType: "full",
      credentials: false,
      username: "",
      password: "",
      options: {
        portRange: "1-1024",
        intensity: "normal",
      },
    });
    setErrors({});
    setShowAdvancedOptions(false);
  };

  return (
    <Dialog
      open={open}
      onClose={onClose}
      maxWidth="md"
      fullWidth
      aria-labelledby="vulnerability-scan-dialog-title"
    >
      <DialogTitle id="vulnerability-scan-dialog-title">
        <Box sx={{ display: "flex", alignItems: "center" }}>
          <SecurityIcon color="primary" sx={{ mr: 1 }} />
          <Typography variant="h6" component="span">
            Start New Vulnerability Scan
          </Typography>
        </Box>
        <IconButton
          aria-label="close"
          onClick={onClose}
          sx={{
            position: "absolute",
            right: 8,
            top: 8,
            color: (theme) => theme.palette.grey[500],
          }}
        >
          <CloseIcon />
        </IconButton>
      </DialogTitle>

      <DialogContent dividers>
        <Alert severity="info" sx={{ mb: 3 }}>
          Configure a vulnerability scan to discover and assess security
          vulnerabilities in your systems.
        </Alert>

        <Grid container spacing={3}>
          {/* Target Configuration */}
          <Grid item xs={12}>
            <Typography variant="subtitle1" gutterBottom>
              Target Configuration
            </Typography>
          </Grid>

          <Grid item xs={12} md={8}>
            <TextField
              label="Target"
              fullWidth
              value={scanConfig.target}
              onChange={(e) => handleScanConfigChange("target", e.target.value)}
              placeholder={
                scanConfig.targetType === "ip"
                  ? "192.168.1.1 or 192.168.1.0/24"
                  : "server.example.com"
              }
              error={!!errors.target}
              helperText={errors.target}
              required
            />
          </Grid>

          <Grid item xs={12} md={4}>
            <FormControl component="fieldset">
              <RadioGroup
                row
                name="targetType"
                value={scanConfig.targetType}
                onChange={handleTargetTypeChange}
              >
                <FormControlLabel
                  value="ip"
                  control={<Radio />}
                  label="IP/CIDR"
                />
                <FormControlLabel
                  value="hostname"
                  control={<Radio />}
                  label="Hostname"
                />
              </RadioGroup>
            </FormControl>
          </Grid>

          {/* Scan Type */}
          <Grid item xs={12} md={6}>
            <FormControl fullWidth>
              <InputLabel id="scan-type-label">Scan Type</InputLabel>
              <Select
                labelId="scan-type-label"
                id="scan-type"
                value={scanConfig.scanType}
                label="Scan Type"
                onChange={handleScanTypeChange}
              >
                <MenuItem value="quick">
                  Quick Scan (Basic checks only)
                </MenuItem>
                <MenuItem value="standard">
                  Standard Scan (Common vulnerabilities)
                </MenuItem>
                <MenuItem value="full">Full Scan (Comprehensive)</MenuItem>
                <MenuItem value="custom">Custom Scan</MenuItem>
              </Select>
              <FormHelperText>
                {scanConfig.scanType === "quick" &&
                  "Fast scan with minimal impact, checks for common vulnerabilities"}
                {scanConfig.scanType === "standard" &&
                  "Balanced scan, checks for most vulnerabilities with moderate thoroughness"}
                {scanConfig.scanType === "full" &&
                  "In-depth scan with all checks enabled, may take longer to complete"}
                {scanConfig.scanType === "custom" &&
                  "Customized scan with specific checks and parameters"}
              </FormHelperText>
            </FormControl>
          </Grid>

          {/* Scan Schedule - For future use */}
          <Grid item xs={12} md={6}>
            <FormControl fullWidth disabled>
              <InputLabel id="scan-schedule-label">Schedule</InputLabel>
              <Select
                labelId="scan-schedule-label"
                id="scan-schedule"
                value="now"
                label="Schedule"
              >
                <MenuItem value="now">Run Immediately</MenuItem>
                <MenuItem value="scheduled">Schedule for Later</MenuItem>
                <MenuItem value="recurring">Set Recurring Scan</MenuItem>
              </Select>
              <FormHelperText>
                Advanced scheduling options will be available in a future update
              </FormHelperText>
            </FormControl>
          </Grid>

          {/* Authentication */}
          <Grid item xs={12}>
            <Divider sx={{ my: 1 }} />
            <Box sx={{ display: "flex", alignItems: "center", mb: 2 }}>
              <Typography variant="subtitle1">Authentication</Typography>
              <Tooltip title="Authenticated scans can discover more vulnerabilities by accessing the system">
                <IconButton size="small" sx={{ ml: 1 }}>
                  <HelpIcon fontSize="small" />
                </IconButton>
              </Tooltip>
            </Box>

            <FormControlLabel
              control={
                <Radio
                  checked={!scanConfig.credentials}
                  onChange={() => handleScanConfigChange("credentials", false)}
                />
              }
              label="No Authentication (Network scan only)"
            />

            <FormControlLabel
              control={
                <Radio
                  checked={scanConfig.credentials}
                  onChange={() => handleScanConfigChange("credentials", true)}
                />
              }
              label="Use Authentication"
            />

            {scanConfig.credentials && (
              <Grid container spacing={2} sx={{ mt: 1 }}>
                <Grid item xs={12} md={6}>
                  <TextField
                    label="Username"
                    fullWidth
                    value={scanConfig.username}
                    onChange={(e) =>
                      handleScanConfigChange("username", e.target.value)
                    }
                    error={!!errors.credentials}
                  />
                </Grid>
                <Grid item xs={12} md={6}>
                  <TextField
                    label="Password"
                    type="password"
                    fullWidth
                    value={scanConfig.password}
                    onChange={(e) =>
                      handleScanConfigChange("password", e.target.value)
                    }
                    error={!!errors.credentials}
                    helperText={errors.credentials}
                  />
                </Grid>
              </Grid>
            )}
          </Grid>

          {/* Advanced Options */}
          <Grid item xs={12}>
            <Divider sx={{ my: 1 }} />
            <Button
              startIcon={showAdvancedOptions ? <CloseIcon /> : <AddIcon />}
              onClick={() => setShowAdvancedOptions(!showAdvancedOptions)}
              sx={{ mb: 2 }}
            >
              {showAdvancedOptions
                ? "Hide Advanced Options"
                : "Show Advanced Options"}
            </Button>

            {showAdvancedOptions && (
              <Grid container spacing={2}>
                <Grid item xs={12} md={6}>
                  <TextField
                    label="Port Range"
                    fullWidth
                    value={scanConfig.options.portRange}
                    onChange={(e) =>
                      handleOptionsChange("portRange", e.target.value)
                    }
                    placeholder="e.g., 1-1024, 80,443,8080"
                    helperText="Comma-separated ports or ranges (e.g., 80,443,8000-8100)"
                  />
                </Grid>

                <Grid item xs={12} md={6}>
                  <FormControl fullWidth>
                    <InputLabel id="scan-intensity-label">
                      Scan Intensity
                    </InputLabel>
                    <Select
                      labelId="scan-intensity-label"
                      id="scan-intensity"
                      value={scanConfig.options.intensity}
                      label="Scan Intensity"
                      onChange={(e) =>
                        handleOptionsChange("intensity", e.target.value)
                      }
                    >
                      <MenuItem value="low">
                        Low (Minimal system impact)
                      </MenuItem>
                      <MenuItem value="normal">Normal (Balanced)</MenuItem>
                      <MenuItem value="aggressive">
                        Aggressive (Faster but higher load)
                      </MenuItem>
                    </Select>
                    <FormHelperText>
                      Higher intensity may cause more system load but completes
                      faster
                    </FormHelperText>
                  </FormControl>
                </Grid>
              </Grid>
            )}
          </Grid>
        </Grid>
      </DialogContent>

      <DialogActions sx={{ px: 3, py: 2 }}>
        <Button onClick={handleReset} disabled={isLoading}>
          Reset
        </Button>
        <Button onClick={onClose} disabled={isLoading}>
          Cancel
        </Button>
        <Button
          variant="contained"
          color="primary"
          onClick={handleStartScan}
          disabled={isLoading}
          startIcon={
            isLoading ? <CircularProgress size={20} /> : <SecurityIcon />
          }
        >
          {isLoading ? "Starting Scan..." : "Start Scan"}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default VulnerabilityScanDialog;
