/**
 * VulnerabilityFilterPanel Component
 *
 * Provides advanced filtering capabilities for the vulnerability management system.
 */
import React, { useState, useEffect } from "react";
import {
  Box,
  Grid,
  Paper,
  Typography,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Chip,
  Slider,
  TextField,
  Button,
  Divider,
  IconButton,
  Tooltip,
  useTheme,
  SelectChangeEvent,
} from "@mui/material";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { AdapterDateFns } from "@mui/x-date-pickers/AdapterDateFns";
import {
  FilterAlt as FilterIcon,
  Clear as ClearIcon,
  Save as SaveIcon,
} from "@mui/icons-material";

// Import types
import {
  VulnerabilityQueryParams,
  VulnerabilitySeverity,
  VulnerabilityStatus,
  VulnerabilitySource,
} from "../types/vulnerabilityTypes";

// Interface for component props
interface VulnerabilityFilterPanelProps {
  filters: VulnerabilityQueryParams;
  onFilterChange: (filters: VulnerabilityQueryParams) => void;
  onSaveFilter?: (name: string, filters: VulnerabilityQueryParams) => void;
}

const VulnerabilityFilterPanel: React.FC<VulnerabilityFilterPanelProps> = ({
  filters,
  onFilterChange,
  onSaveFilter,
}) => {
  const theme = useTheme();

  // Local state for filters
  const [localFilters, setLocalFilters] =
    useState<VulnerabilityQueryParams>(filters);
  const [cvssRange, setCvssRange] = useState<number[]>([
    localFilters.cvssMin || 0,
    localFilters.cvssMax || 10,
  ]);
  const [savedFilterName, setSavedFilterName] = useState("");
  const [showSaveFilter, setShowSaveFilter] = useState(false);

  // Update local filters when props change
  useEffect(() => {
    setLocalFilters(filters);
    setCvssRange([filters.cvssMin || 0, filters.cvssMax || 10]);
  }, [filters]);

  // Handle severity change
  const handleSeverityChange = (
    event: SelectChangeEvent<VulnerabilitySeverity[]>
  ) => {
    const value = event.target.value as VulnerabilitySeverity[];
    setLocalFilters((prev) => ({
      ...prev,
      severity: value,
    }));
  };

  // Handle status change
  const handleStatusChange = (
    event: SelectChangeEvent<VulnerabilityStatus[]>
  ) => {
    const value = event.target.value as VulnerabilityStatus[];
    setLocalFilters((prev) => ({
      ...prev,
      status: value,
    }));
  };

  // Handle source change
  const handleSourceChange = (
    event: SelectChangeEvent<VulnerabilitySource[]>
  ) => {
    const value = event.target.value as VulnerabilitySource[];
    setLocalFilters((prev) => ({
      ...prev,
      source: value,
    }));
  };

  // Handle CVSS range change
  const handleCvssRangeChange = (event: Event, newValue: number | number[]) => {
    setCvssRange(newValue as number[]);
  };

  // Handle CVSS range change commit
  const handleCvssRangeChangeCommit = (
    event: React.SyntheticEvent | Event,
    newValue: number | number[]
  ) => {
    const [min, max] = newValue as number[];
    setLocalFilters((prev) => ({
      ...prev,
      cvssMin: min,
      cvssMax: max,
    }));
  };

  // Handle text field changes
  const handleTextChange =
    (field: keyof VulnerabilityQueryParams) =>
    (event: React.ChangeEvent<HTMLInputElement>) => {
      setLocalFilters((prev) => ({
        ...prev,
        [field]: event.target.value,
      }));
    };

  // Handle date changes
  const handleStartDateChange = (date: Date | null) => {
    setLocalFilters((prev) => ({
      ...prev,
      discoveredStartDate: date ? date.toISOString() : undefined,
    }));
  };

  const handleEndDateChange = (date: Date | null) => {
    setLocalFilters((prev) => ({
      ...prev,
      discoveredEndDate: date ? date.toISOString() : undefined,
    }));
  };

  // Handle boolean filter changes
  const handleBooleanChange =
    (field: "exploitAvailable" | "patchAvailable") =>
    (event: SelectChangeEvent) => {
      const value = event.target.value;
      setLocalFilters((prev) => ({
        ...prev,
        [field]:
          value === "true" ? true : value === "false" ? false : undefined,
      }));
    };

  // Apply filters
  const applyFilters = () => {
    onFilterChange(localFilters);
  };

  // Reset filters
  const resetFilters = () => {
    const emptyFilters: VulnerabilityQueryParams = {};
    setLocalFilters(emptyFilters);
    setCvssRange([0, 10]);
    onFilterChange(emptyFilters);
  };

  // Save filter
  const handleSaveFilter = () => {
    if (onSaveFilter && savedFilterName) {
      onSaveFilter(savedFilterName, localFilters);
      setSavedFilterName("");
      setShowSaveFilter(false);
    }
  };

  return (
    <Paper sx={{ p: 2, mb: 2 }}>
      <Box
        sx={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          mb: 2,
        }}
      >
        <Typography variant="subtitle1">
          <FilterIcon sx={{ verticalAlign: "middle", mr: 1 }} />
          Advanced Filters
        </Typography>

        <Box>
          <Button
            size="small"
            onClick={resetFilters}
            startIcon={<ClearIcon />}
            sx={{ mr: 1 }}
          >
            Reset
          </Button>

          {onSaveFilter && (
            <Button
              size="small"
              onClick={() => setShowSaveFilter(!showSaveFilter)}
              startIcon={<SaveIcon />}
              color="secondary"
            >
              Save Filter
            </Button>
          )}
        </Box>
      </Box>

      {showSaveFilter && (
        <Box sx={{ mb: 2, display: "flex", alignItems: "center" }}>
          <TextField
            label="Filter Name"
            size="small"
            value={savedFilterName}
            onChange={(e) => setSavedFilterName(e.target.value)}
            sx={{ mr: 1, flexGrow: 1 }}
          />
          <Button
            variant="contained"
            color="secondary"
            size="small"
            onClick={handleSaveFilter}
            disabled={!savedFilterName}
          >
            Save
          </Button>
        </Box>
      )}

      <Grid container spacing={2}>
        {/* Severity Filter */}
        <Grid item xs={12} sm={6} md={3}>
          <FormControl fullWidth size="small">
            <InputLabel id="severity-filter-label">Severity</InputLabel>
            <Select
              labelId="severity-filter-label"
              id="severity-filter"
              multiple
              value={localFilters.severity || []}
              onChange={handleSeverityChange}
              label="Severity"
              renderValue={(selected) => (
                <Box sx={{ display: "flex", flexWrap: "wrap", gap: 0.5 }}>
                  {(selected as VulnerabilitySeverity[]).map((value) => (
                    <Chip
                      key={value}
                      label={value}
                      size="small"
                      color={
                        value === VulnerabilitySeverity.CRITICAL
                          ? "error"
                          : value === VulnerabilitySeverity.HIGH
                          ? "error"
                          : value === VulnerabilitySeverity.MEDIUM
                          ? "warning"
                          : value === VulnerabilitySeverity.LOW
                          ? "info"
                          : "default"
                      }
                    />
                  ))}
                </Box>
              )}
            >
              {Object.values(VulnerabilitySeverity).map((severity) => (
                <MenuItem key={severity} value={severity}>
                  {severity}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </Grid>

        {/* Status Filter */}
        <Grid item xs={12} sm={6} md={3}>
          <FormControl fullWidth size="small">
            <InputLabel id="status-filter-label">Status</InputLabel>
            <Select
              labelId="status-filter-label"
              id="status-filter"
              multiple
              value={localFilters.status || []}
              onChange={handleStatusChange}
              label="Status"
              renderValue={(selected) => (
                <Box sx={{ display: "flex", flexWrap: "wrap", gap: 0.5 }}>
                  {(selected as VulnerabilityStatus[]).map((value) => (
                    <Chip
                      key={value}
                      label={value.replace("_", " ")}
                      size="small"
                    />
                  ))}
                </Box>
              )}
            >
              {Object.values(VulnerabilityStatus).map((status) => (
                <MenuItem key={status} value={status}>
                  {status.replace("_", " ")}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </Grid>

        {/* Source Filter */}
        <Grid item xs={12} sm={6} md={3}>
          <FormControl fullWidth size="small">
            <InputLabel id="source-filter-label">Source</InputLabel>
            <Select
              labelId="source-filter-label"
              id="source-filter"
              multiple
              value={localFilters.source || []}
              onChange={handleSourceChange}
              label="Source"
              renderValue={(selected) => (
                <Box sx={{ display: "flex", flexWrap: "wrap", gap: 0.5 }}>
                  {(selected as VulnerabilitySource[]).map((value) => (
                    <Chip
                      key={value}
                      label={value.replace("_", " ")}
                      size="small"
                    />
                  ))}
                </Box>
              )}
            >
              {Object.values(VulnerabilitySource).map((source) => (
                <MenuItem key={source} value={source}>
                  {source.replace("_", " ")}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </Grid>

        {/* CVE/CWE Search */}
        <Grid item xs={12} sm={6} md={3}>
          <TextField
            label="CVE/CWE"
            size="small"
            fullWidth
            value={localFilters.cve || ""}
            onChange={handleTextChange("cve")}
            placeholder="CVE-2021-34527"
          />
        </Grid>

        {/* CVSS Range */}
        <Grid item xs={12} sm={6}>
          <Typography id="cvss-range-slider" gutterBottom>
            CVSS Score Range: {cvssRange[0].toFixed(1)} -{" "}
            {cvssRange[1].toFixed(1)}
          </Typography>
          <Slider
            value={cvssRange}
            onChange={handleCvssRangeChange}
            onChangeCommitted={handleCvssRangeChangeCommit}
            valueLabelDisplay="auto"
            min={0}
            max={10}
            step={0.1}
            marks={[
              { value: 0, label: "0" },
              { value: 4, label: "4" },
              { value: 7, label: "7" },
              { value: 9, label: "9" },
              { value: 10, label: "10" },
            ]}
            aria-labelledby="cvss-range-slider"
          />
        </Grid>

        {/* Exploit Available */}
        <Grid item xs={12} sm={6} md={3}>
          <FormControl fullWidth size="small">
            <InputLabel id="exploit-filter-label">Exploit Available</InputLabel>
            <Select
              labelId="exploit-filter-label"
              id="exploit-filter"
              value={
                localFilters.exploitAvailable === undefined
                  ? ""
                  : localFilters.exploitAvailable.toString()
              }
              onChange={handleBooleanChange("exploitAvailable")}
              label="Exploit Available"
            >
              <MenuItem value="">
                <em>Any</em>
              </MenuItem>
              <MenuItem value="true">Yes</MenuItem>
              <MenuItem value="false">No</MenuItem>
            </Select>
          </FormControl>
        </Grid>

        {/* Patch Available */}
        <Grid item xs={12} sm={6} md={3}>
          <FormControl fullWidth size="small">
            <InputLabel id="patch-filter-label">Patch Available</InputLabel>
            <Select
              labelId="patch-filter-label"
              id="patch-filter"
              value={
                localFilters.patchAvailable === undefined
                  ? ""
                  : localFilters.patchAvailable.toString()
              }
              onChange={handleBooleanChange("patchAvailable")}
              label="Patch Available"
            >
              <MenuItem value="">
                <em>Any</em>
              </MenuItem>
              <MenuItem value="true">Yes</MenuItem>
              <MenuItem value="false">No</MenuItem>
            </Select>
          </FormControl>
        </Grid>

        {/* Date Filters */}
        <Grid item xs={12} sm={6} md={3}>
          <LocalizationProvider dateAdapter={AdapterDateFns}>
            <DatePicker
              label="Discovered From"
              value={
                localFilters.discoveredStartDate
                  ? new Date(localFilters.discoveredStartDate)
                  : null
              }
              onChange={handleStartDateChange}
              slotProps={{ textField: { size: "small", fullWidth: true } }}
            />
          </LocalizationProvider>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <LocalizationProvider dateAdapter={AdapterDateFns}>
            <DatePicker
              label="Discovered To"
              value={
                localFilters.discoveredEndDate
                  ? new Date(localFilters.discoveredEndDate)
                  : null
              }
              onChange={handleEndDateChange}
              slotProps={{ textField: { size: "small", fullWidth: true } }}
            />
          </LocalizationProvider>
        </Grid>

        {/* System Filter */}
        <Grid item xs={12} sm={6} md={6}>
          <TextField
            label="Affected System"
            size="small"
            fullWidth
            value={localFilters.affectedSystem || ""}
            onChange={handleTextChange("affectedSystem")}
            placeholder="server01.example.com"
          />
        </Grid>

        <Grid item xs={12}>
          <Divider sx={{ my: 1 }} />
          <Box sx={{ display: "flex", justifyContent: "flex-end", mt: 1 }}>
            <Button
              variant="contained"
              color="primary"
              onClick={applyFilters}
              startIcon={<FilterIcon />}
            >
              Apply Filters
            </Button>
          </Box>
        </Grid>
      </Grid>
    </Paper>
  );
};

export default VulnerabilityFilterPanel;
