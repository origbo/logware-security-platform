/**
 * VulnerabilityStatisticsPanel Component
 *
 * Displays summary statistics for vulnerabilities, including severity distribution,
 * status counts, and remediation metrics.
 */
import React from "react";
import {
  Box,
  Grid,
  Paper,
  Typography,
  LinearProgress,
  Divider,
  useTheme,
} from "@mui/material";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
  Legend,
} from "recharts";
import {
  ErrorOutline as ErrorIcon,
  CheckCircleOutline as CheckCircleIcon,
  AccessTimeOutlined as AccessTimeIcon,
  SecurityOutlined as SecurityIcon,
} from "@mui/icons-material";

// Import types
import { VulnerabilityStats } from "../types/vulnerabilityTypes";

// Interface for component props
interface VulnerabilityStatisticsPanelProps {
  stats: VulnerabilityStats;
}

const VulnerabilityStatisticsPanel: React.FC<
  VulnerabilityStatisticsPanelProps
> = ({ stats }) => {
  const theme = useTheme();

  // Define type for severity and status keys
  type SeverityKey = keyof typeof severityColors;
  type StatusKey = keyof typeof statusColors;

  // Prepare data for severity chart with proper typing
  const severityData = Object.entries(stats.bySeverity || {}).map(
    ([key, value]) => ({
      name: key as SeverityKey,
      value,
    })
  );

  // Prepare data for status chart with proper typing
  const statusData = Object.entries(stats.byStatus || {}).map(
    ([key, value]) => ({
      name: key.replace("_", " "),
      statusKey: key as StatusKey,
      value,
    })
  );

  // Define colors for severity levels
  const severityColors = {
    CRITICAL: theme.palette.error.dark,
    HIGH: theme.palette.error.main,
    MEDIUM: theme.palette.warning.main,
    LOW: theme.palette.info.main,
    INFORMATIONAL: theme.palette.grey[500],
  };

  // Define colors for status
  const statusColors = {
    OPEN: theme.palette.error.main,
    IN_PROGRESS: theme.palette.warning.main,
    REMEDIATED: theme.palette.success.main,
    MITIGATED: theme.palette.info.main,
    ACCEPTED: theme.palette.grey[600],
    FALSE_POSITIVE: theme.palette.grey[500],
  };

  // Statistics cards
  const statCards = [
    {
      title: "Open Vulnerabilities",
      value: stats.totalOpen || 0,
      icon: <ErrorIcon color="error" fontSize="large" />,
      color: theme.palette.error.main,
    },
    {
      title: "Remediated",
      value: stats.totalRemediated || 0,
      icon: <CheckCircleIcon color="success" fontSize="large" />,
      color: theme.palette.success.main,
    },
    {
      title: "Avg. Remediation Time",
      value: `${stats.averageRemediationTime || 0} days`,
      icon: <AccessTimeIcon color="primary" fontSize="large" />,
      color: theme.palette.primary.main,
    },
    {
      title: "Critical w/ Exploit",
      value: stats.criticalWithExploit || 0,
      icon: <SecurityIcon color="error" fontSize="large" />,
      color: theme.palette.error.dark,
    },
  ];

  return (
    <Paper sx={{ p: 2, mb: 2 }}>
      <Typography variant="h6" gutterBottom>
        Vulnerability Statistics Overview
      </Typography>

      {/* Stats Cards */}
      <Grid container spacing={2} sx={{ mb: 3 }}>
        {statCards.map((stat, index) => (
          <Grid item xs={12} sm={6} md={3} key={index}>
            <Paper
              elevation={0}
              variant="outlined"
              sx={{
                p: 2,
                display: "flex",
                alignItems: "center",
                borderLeft: `4px solid ${stat.color}`,
              }}
            >
              <Box sx={{ mr: 2 }}>{stat.icon}</Box>
              <Box>
                <Typography variant="body2" color="textSecondary">
                  {stat.title}
                </Typography>
                <Typography variant="h6" component="div">
                  {stat.value}
                </Typography>
              </Box>
            </Paper>
          </Grid>
        ))}
      </Grid>

      <Grid container spacing={3}>
        {/* Severity Distribution */}
        <Grid item xs={12} md={6}>
          <Box sx={{ height: 300 }}>
            <Typography variant="subtitle1" gutterBottom>
              Vulnerabilities by Severity
            </Typography>
            <ResponsiveContainer width="100%" height="90%">
              <PieChart>
                <Pie
                  data={severityData}
                  dataKey="value"
                  nameKey="name"
                  cx="50%"
                  cy="50%"
                  outerRadius={80}
                  label={({ name, percent }) =>
                    `${name} ${(percent * 100).toFixed(0)}%`
                  }
                >
                  {severityData.map((entry, index) => (
                    <Cell
                      key={`cell-${index}`}
                      fill={
                        severityColors[entry.name] || theme.palette.grey[500]
                      }
                    />
                  ))}
                </Pie>
                <Tooltip
                  formatter={(value, name) => [value, name]}
                  labelFormatter={() => ""}
                />
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          </Box>
        </Grid>

        {/* Status Distribution */}
        <Grid item xs={12} md={6}>
          <Box sx={{ height: 300 }}>
            <Typography variant="subtitle1" gutterBottom>
              Vulnerabilities by Status
            </Typography>
            <ResponsiveContainer width="100%" height="90%">
              <BarChart data={statusData}>
                <CartesianGrid strokeDasharray="3 3" vertical={false} />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="value">
                  {statusData.map((entry, index) => (
                    <Cell
                      key={`cell-${index}`}
                      fill={
                        statusColors[entry.statusKey] || theme.palette.grey[500]
                      }
                    />
                  ))}
                </Bar>
              </BarChart>
            </ResponsiveContainer>
          </Box>
        </Grid>
      </Grid>

      <Divider sx={{ my: 2 }} />

      <Grid container spacing={2}>
        {/* Age breakdown */}
        <Grid item xs={12} md={6}>
          <Typography variant="subtitle2" gutterBottom>
            Vulnerabilities Aging
          </Typography>
          <Box sx={{ display: "flex", alignItems: "center", mb: 1 }}>
            <Typography variant="body2" sx={{ minWidth: 150 }}>
              Open {">"} 30 days
            </Typography>
            <Box sx={{ flexGrow: 1, mr: 1 }}>
              <LinearProgress
                variant="determinate"
                value={
                  (stats.openLongerThan30Days / (stats.totalOpen || 1)) * 100
                }
                color="warning"
                sx={{ height: 10, borderRadius: 5 }}
              />
            </Box>
            <Typography variant="body2">
              {stats.openLongerThan30Days || 0}
            </Typography>
          </Box>
          <Box sx={{ display: "flex", alignItems: "center" }}>
            <Typography variant="body2" sx={{ minWidth: 150 }}>
              Open {">"} 90 days
            </Typography>
            <Box sx={{ flexGrow: 1, mr: 1 }}>
              <LinearProgress
                variant="determinate"
                value={
                  (stats.openLongerThan90Days / (stats.totalOpen || 1)) * 100
                }
                color="error"
                sx={{ height: 10, borderRadius: 5 }}
              />
            </Box>
            <Typography variant="body2">
              {stats.openLongerThan90Days || 0}
            </Typography>
          </Box>
        </Grid>

        {/* System breakdown */}
        <Grid item xs={12} md={6}>
          <Typography variant="subtitle2" gutterBottom>
            Top Affected Systems
          </Typography>
          <Box sx={{ display: "flex", flexDirection: "column", gap: 1 }}>
            {Object.entries(stats.bySystem || {})
              .sort((a, b) => b[1] - a[1])
              .slice(0, 3)
              .map(([system, count], index) => (
                <Box key={index} sx={{ display: "flex", alignItems: "center" }}>
                  <Typography
                    variant="body2"
                    sx={{
                      minWidth: 150,
                      overflow: "hidden",
                      textOverflow: "ellipsis",
                    }}
                  >
                    {system}
                  </Typography>
                  <Box sx={{ flexGrow: 1, mr: 1 }}>
                    <LinearProgress
                      variant="determinate"
                      value={
                        (count /
                          (Object.values(stats.bySystem || {}).reduce(
                            (a, b) => a + b,
                            0
                          ) || 1)) *
                        100
                      }
                      color="primary"
                      sx={{ height: 10, borderRadius: 5 }}
                    />
                  </Box>
                  <Typography variant="body2">{count}</Typography>
                </Box>
              ))}
          </Box>
        </Grid>
      </Grid>
    </Paper>
  );
};

export default VulnerabilityStatisticsPanel;
