/**
 * VulnerabilityDetail Component
 *
 * Provides a detailed view for individual vulnerabilities, including
 * description, timeline, remediation actions, and related information.
 */
import React, { useState } from "react";
import EditIcon from "@mui/icons-material/Edit";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Box,
  Grid,
  Typography,
  Chip,
  Button,
  Divider,
  Paper,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton,
  Tabs,
  Tab,
  ListItem,
  ListItemIcon,
  ListItemText,
  List,
  Link,
  Tooltip,
  CircularProgress,
  useTheme,
  SelectChangeEvent,
} from "@mui/material";
import {
  Error as ErrorIcon,
  Warning as WarningIcon,
  Info as InfoIcon,
  Security as SecurityIcon,
  Timeline as TimelineIcon,
  Assignment as AssignmentIcon,
  BugReport as BugReportIcon,
  Computer as ComputerIcon,
  Code as CodeIcon,
  Description as DescriptionIcon,
  Build as BuildIcon,
  Close as CloseIcon,
  CheckCircle as CheckCircleIcon,
  Link as LinkIcon,
  CalendarToday as CalendarIcon,
  Person as PersonIcon,
} from "@mui/icons-material";
import { format } from "date-fns";

// Import types
import {
  Vulnerability,
  VulnerabilitySeverity,
  VulnerabilityStatus,
  VulnerabilityUpdate,
} from "../types/vulnerabilityTypes";

// Interface for component props
interface VulnerabilityDetailProps {
  open: boolean;
  vulnerability: Vulnerability;
  onClose: () => void;
  onUpdate: (id: string, updates: VulnerabilityUpdate) => Promise<void>;
}

// Tab panel interface
interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

// Tab panel component
const TabPanel: React.FC<TabPanelProps> = ({
  children,
  value,
  index,
  ...other
}) => {
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`vuln-detail-tabpanel-${index}`}
      aria-labelledby={`vuln-detail-tab-${index}`}
      {...other}
      style={{ padding: "16px 0" }}
    >
      {value === index && <Box>{children}</Box>}
    </div>
  );
};

// TabProps for accessibility
function a11yProps(index: number) {
  return {
    id: `vuln-detail-tab-${index}`,
    "aria-controls": `vuln-detail-tabpanel-${index}`,
  };
}

// VulnerabilityDetail component
const VulnerabilityDetail: React.FC<VulnerabilityDetailProps> = ({
  open,
  vulnerability,
  onClose,
  onUpdate,
}) => {
  const theme = useTheme();

  // State for tab selection
  const [tabValue, setTabValue] = useState(0);

  // State for edit mode
  const [isEditing, setIsEditing] = useState(false);

  // State for form data
  const [formData, setFormData] = useState<VulnerabilityUpdate>({});

  // State for loading
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Handle tab change
  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  // Enter edit mode
  const handleEditClick = () => {
    setFormData({
      status: vulnerability.status,
      severity: vulnerability.severity,
      assignedTo: vulnerability.assignedTo,
      notes: vulnerability.notes,
    });
    setIsEditing(true);
  };

  // Handle form field changes
  const handleFormChange = (field: keyof VulnerabilityUpdate, value: any) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  // Handle status change
  const handleStatusChange = (
    event: SelectChangeEvent<VulnerabilityStatus>
  ) => {
    handleFormChange("status", event.target.value);
  };

  // Handle severity change
  const handleSeverityChange = (
    event: SelectChangeEvent<VulnerabilitySeverity>
  ) => {
    handleFormChange("severity", event.target.value);
  };

  // Cancel edit mode
  const handleCancelEdit = () => {
    setIsEditing(false);
    setFormData({});
  };

  // Save changes
  const handleSaveChanges = async () => {
    setIsSubmitting(true);

    try {
      await onUpdate(vulnerability.id, formData);
      setIsEditing(false);
      setFormData({});
    } catch (error) {
      console.error("Failed to update vulnerability:", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  // Get severity color
  const getSeverityColor = (severity: VulnerabilitySeverity) => {
    switch (severity) {
      case VulnerabilitySeverity.CRITICAL:
        return theme.palette.error.dark;
      case VulnerabilitySeverity.HIGH:
        return theme.palette.error.main;
      case VulnerabilitySeverity.MEDIUM:
        return theme.palette.warning.main;
      case VulnerabilitySeverity.LOW:
        return theme.palette.info.main;
      case VulnerabilitySeverity.INFORMATIONAL:
        return theme.palette.grey[500];
      default:
        return theme.palette.grey[500];
    }
  };

  // Get severity icon
  const getSeverityIcon = (severity: VulnerabilitySeverity) => {
    switch (severity) {
      case VulnerabilitySeverity.CRITICAL:
        return <ErrorIcon color="error" />;
      case VulnerabilitySeverity.HIGH:
        return <ErrorIcon color="error" />;
      case VulnerabilitySeverity.MEDIUM:
        return <WarningIcon color="warning" />;
      case VulnerabilitySeverity.LOW:
        return <InfoIcon color="info" />;
      case VulnerabilitySeverity.INFORMATIONAL:
        return <InfoIcon color="action" />;
      default:
        return <InfoIcon color="action" />;
    }
  };

  // Get status color
  const getStatusColor = (status: VulnerabilityStatus) => {
    switch (status) {
      case VulnerabilityStatus.OPEN:
        return theme.palette.error.main;
      case VulnerabilityStatus.IN_PROGRESS:
        return theme.palette.warning.main;
      case VulnerabilityStatus.REMEDIATED:
        return theme.palette.success.main;
      case VulnerabilityStatus.MITIGATED:
        return theme.palette.info.main;
      case VulnerabilityStatus.ACCEPTED:
        return theme.palette.grey[600];
      case VulnerabilityStatus.FALSE_POSITIVE:
        return theme.palette.grey[500];
      default:
        return theme.palette.grey[500];
    }
  };

  return (
    <Dialog
      open={open}
      onClose={onClose}
      maxWidth="md"
      fullWidth
      aria-labelledby="vulnerability-detail-dialog-title"
    >
      <DialogTitle id="vulnerability-detail-dialog-title" sx={{ pr: 6 }}>
        <Box sx={{ display: "flex", alignItems: "flex-start" }}>
          <Box sx={{ mr: 1 }}>{getSeverityIcon(vulnerability.severity)}</Box>
          <Box sx={{ flexGrow: 1 }}>
            <Typography variant="h6" component="span">
              {vulnerability.title}
            </Typography>
            <Typography variant="caption" display="block" color="textSecondary">
              ID: {vulnerability.id} â€¢ Discovered:{" "}
              {format(new Date(vulnerability.discoveredAt), "MMM d, yyyy")}
            </Typography>
          </Box>
        </Box>
        <IconButton
          aria-label="close"
          onClick={onClose}
          sx={{
            position: "absolute",
            right: 8,
            top: 8,
            color: (theme) => theme.palette.grey[500],
          }}
        >
          <CloseIcon />
        </IconButton>
      </DialogTitle>

      <DialogContent dividers>
        <Box sx={{ mb: 2, display: "flex", flexWrap: "wrap", gap: 1 }}>
          <Chip
            label={vulnerability.severity}
            sx={{
              bgcolor: getSeverityColor(vulnerability.severity),
              color: "#fff",
            }}
          />

          <Chip
            label={vulnerability.status.replace("_", " ")}
            sx={{
              bgcolor: getStatusColor(vulnerability.status),
              color: theme.palette.getContrastText(
                getStatusColor(vulnerability.status)
              ),
            }}
          />

          {vulnerability.cve && (
            <Chip
              label={vulnerability.cve}
              color="primary"
              variant="outlined"
              icon={<BugReportIcon />}
            />
          )}

          {vulnerability.cvss && (
            <Chip
              label={`CVSS: ${vulnerability.cvss.toFixed(1)}`}
              color="secondary"
              variant="outlined"
            />
          )}

          {vulnerability.exploitAvailable && (
            <Chip label="Exploit Available" color="error" variant="outlined" />
          )}

          {vulnerability.source && (
            <Chip
              label={vulnerability.source.replace("_", " ")}
              color="default"
              variant="outlined"
            />
          )}

          {vulnerability.tags &&
            vulnerability.tags.map((tag) => (
              <Chip key={tag} label={tag} color="default" size="small" />
            ))}
        </Box>

        <Tabs
          value={tabValue}
          onChange={handleTabChange}
          aria-label="vulnerability detail tabs"
          sx={{ borderBottom: 1, borderColor: "divider" }}
        >
          <Tab
            label="Overview"
            icon={<DescriptionIcon />}
            iconPosition="start"
            {...a11yProps(0)}
          />
          <Tab
            label="Systems"
            icon={<ComputerIcon />}
            iconPosition="start"
            {...a11yProps(1)}
          />
          <Tab
            label="Remediation"
            icon={<BuildIcon />}
            iconPosition="start"
            {...a11yProps(2)}
          />
          <Tab
            label="References"
            icon={<LinkIcon />}
            iconPosition="start"
            {...a11yProps(3)}
          />
        </Tabs>

        <TabPanel value={tabValue} index={0}>
          <Grid container spacing={3}>
            <Grid item xs={12} md={7}>
              <Typography variant="subtitle1" gutterBottom>
                Description
              </Typography>
              <Typography variant="body2" paragraph>
                {vulnerability.description}
              </Typography>

              {vulnerability.notes && (
                <>
                  <Typography variant="subtitle1" gutterBottom>
                    Notes
                  </Typography>
                  <Typography variant="body2" paragraph>
                    {vulnerability.notes}
                  </Typography>
                </>
              )}

              {vulnerability.cwe && (
                <>
                  <Typography variant="subtitle1" gutterBottom>
                    CWE
                  </Typography>
                  <Link
                    href={`https://cwe.mitre.org/data/definitions/${vulnerability.cwe.replace(
                      "CWE-",
                      ""
                    )}.html`}
                    target="_blank"
                    rel="noopener"
                  >
                    {vulnerability.cwe}
                  </Link>
                </>
              )}
            </Grid>

            <Grid item xs={12} md={5}>
              <Paper variant="outlined" sx={{ p: 2, mb: 2 }}>
                <Typography variant="subtitle2" gutterBottom>
                  Risk Assessment
                </Typography>

                <Grid container spacing={2}>
                  <Grid item xs={6}>
                    <Typography variant="caption" color="textSecondary">
                      Severity
                    </Typography>
                    <Box sx={{ display: "flex", alignItems: "center" }}>
                      {getSeverityIcon(vulnerability.severity)}
                      <Typography variant="body2" sx={{ ml: 0.5 }}>
                        {vulnerability.severity}
                      </Typography>
                    </Box>
                  </Grid>

                  <Grid item xs={6}>
                    <Typography variant="caption" color="textSecondary">
                      CVSS Score
                    </Typography>
                    <Typography variant="body2">
                      {vulnerability.cvss
                        ? vulnerability.cvss.toFixed(1)
                        : "N/A"}
                    </Typography>
                  </Grid>

                  {vulnerability.impactScore !== undefined && (
                    <Grid item xs={6}>
                      <Typography variant="caption" color="textSecondary">
                        Impact Score
                      </Typography>
                      <Typography variant="body2">
                        {vulnerability.impactScore.toFixed(1)}
                      </Typography>
                    </Grid>
                  )}

                  {vulnerability.exploitabilityScore !== undefined && (
                    <Grid item xs={6}>
                      <Typography variant="caption" color="textSecondary">
                        Exploitability
                      </Typography>
                      <Typography variant="body2">
                        {vulnerability.exploitabilityScore.toFixed(1)}
                      </Typography>
                    </Grid>
                  )}

                  <Grid item xs={12}>
                    <Typography variant="caption" color="textSecondary">
                      Exploit Available
                    </Typography>
                    <Typography variant="body2">
                      {vulnerability.exploitAvailable ? "Yes" : "No"}
                    </Typography>
                  </Grid>
                </Grid>
              </Paper>

              <Paper variant="outlined" sx={{ p: 2 }}>
                <Typography variant="subtitle2" gutterBottom>
                  Status Information
                </Typography>

                <Grid container spacing={2}>
                  <Grid item xs={6}>
                    <Typography variant="caption" color="textSecondary">
                      Current Status
                    </Typography>
                    <Typography variant="body2">
                      {vulnerability.status.replace("_", " ")}
                    </Typography>
                  </Grid>

                  <Grid item xs={6}>
                    <Typography variant="caption" color="textSecondary">
                      Discovered
                    </Typography>
                    <Typography variant="body2">
                      {format(
                        new Date(vulnerability.discoveredAt),
                        "MMM d, yyyy"
                      )}
                    </Typography>
                  </Grid>

                  {vulnerability.lastUpdatedAt && (
                    <Grid item xs={6}>
                      <Typography variant="caption" color="textSecondary">
                        Last Updated
                      </Typography>
                      <Typography variant="body2">
                        {format(
                          new Date(vulnerability.lastUpdatedAt),
                          "MMM d, yyyy"
                        )}
                      </Typography>
                    </Grid>
                  )}

                  {vulnerability.remediatedAt && (
                    <Grid item xs={6}>
                      <Typography variant="caption" color="textSecondary">
                        Remediated
                      </Typography>
                      <Typography variant="body2">
                        {format(
                          new Date(vulnerability.remediatedAt),
                          "MMM d, yyyy"
                        )}
                      </Typography>
                    </Grid>
                  )}

                  {vulnerability.assignedTo && (
                    <Grid item xs={12}>
                      <Typography variant="caption" color="textSecondary">
                        Assigned To
                      </Typography>
                      <Box sx={{ display: "flex", alignItems: "center" }}>
                        <PersonIcon fontSize="small" sx={{ mr: 0.5 }} />
                        <Typography variant="body2">
                          {vulnerability.assignedTo}
                        </Typography>
                      </Box>
                    </Grid>
                  )}
                </Grid>
              </Paper>
            </Grid>
          </Grid>
        </TabPanel>

        <TabPanel value={tabValue} index={1}>
          <Typography variant="subtitle1" gutterBottom>
            Affected Systems
          </Typography>

          {vulnerability.affectedSystems &&
          vulnerability.affectedSystems.length > 0 ? (
            <List>
              {vulnerability.affectedSystems.map((system, index) => (
                <ListItem key={index}>
                  <ListItemIcon>
                    <ComputerIcon />
                  </ListItemIcon>
                  <ListItemText
                    primary={system}
                    secondary={vulnerability.affectedComponents?.[index] || ""}
                  />
                </ListItem>
              ))}
            </List>
          ) : (
            <Typography variant="body2" color="textSecondary">
              No affected systems specified
            </Typography>
          )}
        </TabPanel>

        <TabPanel value={tabValue} index={2}>
          <Typography variant="subtitle1" gutterBottom>
            Remediation Actions
          </Typography>

          {vulnerability.remediation ? (
            <Box>
              <Paper variant="outlined" sx={{ p: 2, mb: 2 }}>
                <Grid container spacing={2}>
                  <Grid item xs={12}>
                    <Typography variant="caption" color="textSecondary">
                      Description
                    </Typography>
                    <Typography variant="body2">
                      {vulnerability.remediation.description}
                    </Typography>
                  </Grid>

                  <Grid item xs={4}>
                    <Typography variant="caption" color="textSecondary">
                      Type
                    </Typography>
                    <Typography
                      variant="body2"
                      sx={{ textTransform: "capitalize" }}
                    >
                      {vulnerability.remediation.type}
                    </Typography>
                  </Grid>

                  <Grid item xs={4}>
                    <Typography variant="caption" color="textSecondary">
                      Effort
                    </Typography>
                    <Typography
                      variant="body2"
                      sx={{ textTransform: "capitalize" }}
                    >
                      {vulnerability.remediation.effort}
                    </Typography>
                  </Grid>

                  <Grid item xs={4}>
                    <Typography variant="caption" color="textSecondary">
                      Status
                    </Typography>
                    <Chip
                      label={vulnerability.remediation.status}
                      size="small"
                      color={
                        vulnerability.remediation.status === "completed"
                          ? "success"
                          : vulnerability.remediation.status === "in_progress"
                          ? "warning"
                          : "default"
                      }
                      sx={{ textTransform: "capitalize" }}
                    />
                  </Grid>

                  {vulnerability.remediation.assignedTo && (
                    <Grid item xs={6}>
                      <Typography variant="caption" color="textSecondary">
                        Assigned To
                      </Typography>
                      <Box sx={{ display: "flex", alignItems: "center" }}>
                        <PersonIcon fontSize="small" sx={{ mr: 0.5 }} />
                        <Typography variant="body2">
                          {vulnerability.remediation.assignedTo}
                        </Typography>
                      </Box>
                    </Grid>
                  )}

                  {vulnerability.remediation.estimatedCompletionDate && (
                    <Grid item xs={6}>
                      <Typography variant="caption" color="textSecondary">
                        Estimated Completion
                      </Typography>
                      <Box sx={{ display: "flex", alignItems: "center" }}>
                        <CalendarIcon fontSize="small" sx={{ mr: 0.5 }} />
                        <Typography variant="body2">
                          {format(
                            new Date(
                              vulnerability.remediation.estimatedCompletionDate
                            ),
                            "MMM d, yyyy"
                          )}
                        </Typography>
                      </Box>
                    </Grid>
                  )}

                  {vulnerability.remediation.notes && (
                    <Grid item xs={12}>
                      <Typography variant="caption" color="textSecondary">
                        Notes
                      </Typography>
                      <Typography variant="body2">
                        {vulnerability.remediation.notes}
                      </Typography>
                    </Grid>
                  )}
                </Grid>
              </Paper>
            </Box>
          ) : (
            <Typography variant="body2" color="textSecondary">
              No remediation plan specified yet
            </Typography>
          )}

          {vulnerability.patchAvailable && (
            <Box sx={{ mt: 3 }}>
              <Typography variant="subtitle1" gutterBottom>
                Patch Information
              </Typography>

              <Paper variant="outlined" sx={{ p: 2 }}>
                <Typography variant="body2">
                  A patch is available for this vulnerability.
                </Typography>

                {vulnerability.patchLink && (
                  <Button
                    variant="outlined"
                    startIcon={<LinkIcon />}
                    href={vulnerability.patchLink}
                    target="_blank"
                    rel="noopener"
                    sx={{ mt: 1 }}
                  >
                    Download Patch
                  </Button>
                )}
              </Paper>
            </Box>
          )}
        </TabPanel>

        <TabPanel value={tabValue} index={3}>
          <Typography variant="subtitle1" gutterBottom>
            References
          </Typography>

          {vulnerability.references && vulnerability.references.length > 0 ? (
            <List>
              {vulnerability.references.map((ref, index) => (
                <ListItem key={index}>
                  <ListItemIcon>
                    <LinkIcon />
                  </ListItemIcon>
                  <ListItemText>
                    <Link href={ref} target="_blank" rel="noopener">
                      {ref}
                    </Link>
                  </ListItemText>
                </ListItem>
              ))}
            </List>
          ) : (
            <Typography variant="body2" color="textSecondary">
              No references provided
            </Typography>
          )}

          {vulnerability.cve && (
            <Box sx={{ mt: 3 }}>
              <Typography variant="subtitle1" gutterBottom>
                External Links
              </Typography>

              <List>
                <ListItem>
                  <ListItemIcon>
                    <SecurityIcon />
                  </ListItemIcon>
                  <ListItemText>
                    <Link
                      href={`https://nvd.nist.gov/vuln/detail/${vulnerability.cve}`}
                      target="_blank"
                      rel="noopener"
                    >
                      NVD - {vulnerability.cve}
                    </Link>
                  </ListItemText>
                </ListItem>

                <ListItem>
                  <ListItemIcon>
                    <SecurityIcon />
                  </ListItemIcon>
                  <ListItemText>
                    <Link
                      href={`https://cve.mitre.org/cgi-bin/cvename.cgi?name=${vulnerability.cve}`}
                      target="_blank"
                      rel="noopener"
                    >
                      MITRE - {vulnerability.cve}
                    </Link>
                  </ListItemText>
                </ListItem>
              </List>
            </Box>
          )}

          {vulnerability.threatCategory &&
            vulnerability.threatCategory.length > 0 && (
              <Box sx={{ mt: 3 }}>
                <Typography variant="subtitle1" gutterBottom>
                  Threat Categories
                </Typography>

                <Box sx={{ display: "flex", flexWrap: "wrap", gap: 1 }}>
                  {vulnerability.threatCategory.map((category, index) => (
                    <Chip
                      key={index}
                      label={category}
                      color="default"
                      variant="outlined"
                    />
                  ))}
                </Box>
              </Box>
            )}
        </TabPanel>
      </DialogContent>

      <DialogActions sx={{ px: 3, py: 2 }}>
        {isEditing ? (
          <>
            <Box sx={{ flexGrow: 1, display: "flex", gap: 2 }}>
              <FormControl
                variant="outlined"
                size="small"
                sx={{ minWidth: 150 }}
              >
                <InputLabel id="status-select-label">Status</InputLabel>
                <Select
                  labelId="status-select-label"
                  id="status-select"
                  value={formData.status}
                  onChange={handleStatusChange}
                  label="Status"
                >
                  {Object.values(VulnerabilityStatus).map((status) => (
                    <MenuItem key={status} value={status}>
                      {status.replace("_", " ")}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>

              <FormControl
                variant="outlined"
                size="small"
                sx={{ minWidth: 150 }}
              >
                <InputLabel id="severity-select-label">Severity</InputLabel>
                <Select
                  labelId="severity-select-label"
                  id="severity-select"
                  value={formData.severity}
                  onChange={handleSeverityChange}
                  label="Severity"
                >
                  {Object.values(VulnerabilitySeverity).map((severity) => (
                    <MenuItem key={severity} value={severity}>
                      {severity}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Box>

            <Button onClick={handleCancelEdit}>Cancel</Button>
            <Button
              variant="contained"
              color="primary"
              onClick={handleSaveChanges}
              disabled={isSubmitting}
              startIcon={isSubmitting ? <CircularProgress size={20} /> : null}
            >
              Save Changes
            </Button>
          </>
        ) : (
          <>
            <Button onClick={onClose}>Close</Button>
            <Button
              variant="outlined"
              color="primary"
              onClick={handleEditClick}
              startIcon={<EditIcon />}
            >
              Edit
            </Button>
            <Button
              variant="contained"
              color="primary"
              startIcon={<CheckCircleIcon />}
              onClick={() => {
                setFormData({ status: VulnerabilityStatus.REMEDIATED });
                handleSaveChanges();
              }}
              disabled={
                vulnerability.status === VulnerabilityStatus.REMEDIATED ||
                vulnerability.status === VulnerabilityStatus.FALSE_POSITIVE
              }
            >
              Mark as Remediated
            </Button>
          </>
        )}
      </DialogActions>
    </Dialog>
  );
};

export default VulnerabilityDetail;
