/**
 * Vulnerability Management Component
 *
 * Main component for vulnerability management in the Logware Security Platform.
 * Provides a comprehensive interface for viewing, filtering, and managing vulnerabilities.
 */
import React, { useState, useEffect } from "react";
import {
  Box,
  Paper,
  Grid,
  Typography,
  Tabs,
  Tab,
  Button,
  IconButton,
  TextField,
  InputAdornment,
  Chip,
  Divider,
  Dialog,
  CircularProgress,
  Snackbar,
  Alert,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  SelectChangeEvent,
  Tooltip,
  useTheme,
} from "@mui/material";
import {
  DataGrid,
  GridColDef,
  GridToolbar,
  GridRenderCellParams,
  GridSelectionModel,
} from "@mui/x-data-grid";
import {
  Search as SearchIcon,
  FilterList as FilterIcon,
  Refresh as RefreshIcon,
  Add as AddIcon,
  GetApp as DownloadIcon,
  Upload as UploadIcon,
  Security as SecurityIcon,
  ReportProblem as ReportProblemIcon,
  Warning as WarningIcon,
  Info as InfoIcon,
  Error as ErrorIcon,
  CheckCircle as CheckCircleIcon,
  Visibility as VisibilityIcon,
  Delete as DeleteIcon,
  Edit as EditIcon,
  ArrowDropDown as ArrowDropDownIcon,
} from "@mui/icons-material";
import { format } from "date-fns";

// Import types and API hooks
import {
  Vulnerability,
  VulnerabilitySeverity,
  VulnerabilityStatus,
  VulnerabilitySource,
  VulnerabilityQueryParams,
} from "../types/vulnerabilityTypes";
import {
  useGetVulnerabilitiesQuery,
  useGetVulnerabilityStatsQuery,
  useUpdateVulnerabilityMutation,
  useBulkUpdateVulnerabilitiesMutation,
  useTriggerScanMutation,
} from "../services/vulnerabilitiesApi";

// Import sub-components
import VulnerabilityDetail from "./VulnerabilityDetail";
import VulnerabilityFilterPanel from "./VulnerabilityFilterPanel";
import VulnerabilityStatisticsPanel from "./VulnerabilityStatisticsPanel";
import VulnerabilityScanDialog from "./VulnerabilityScanDialog";

// Define tab interface for vulnerability categories
interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

// Tab panel component
const TabPanel: React.FC<TabPanelProps> = ({
  children,
  value,
  index,
  ...other
}) => {
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`vulnerability-tabpanel-${index}`}
      aria-labelledby={`vulnerability-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ pt: 2 }}>{children}</Box>}
    </div>
  );
};

// TabProps for accessibility
function a11yProps(index: number) {
  return {
    id: `vulnerability-tab-${index}`,
    "aria-controls": `vulnerability-tabpanel-${index}`,
  };
}

// Main VulnerabilityManagement component
const VulnerabilityManagement: React.FC = () => {
  const theme = useTheme();

  // State for tab selection
  const [tabValue, setTabValue] = useState(0);

  // State for filtering
  const [filterParams, setFilterParams] = useState<VulnerabilityQueryParams>(
    {}
  );
  const [showFilters, setShowFilters] = useState(false);

  // State for vulnerability selection
  const [selectedVulnerabilities, setSelectedVulnerabilities] =
    useState<GridSelectionModel>([]);

  // State for details dialog
  const [detailOpen, setDetailOpen] = useState(false);
  const [currentVulnerability, setCurrentVulnerability] =
    useState<Vulnerability | null>(null);

  // State for scan dialog
  const [scanDialogOpen, setScanDialogOpen] = useState(false);

  // State for notifications
  const [notification, setNotification] = useState<{
    open: boolean;
    message: string;
    severity: "success" | "info" | "warning" | "error";
  }>({
    open: false,
    message: "",
    severity: "info",
  });

  // RTK Query hooks
  const {
    data: vulnerabilities = [],
    isLoading,
    isFetching,
    isError,
    refetch,
  } = useGetVulnerabilitiesQuery(filterParams);

  const { data: stats } = useGetVulnerabilityStatsQuery();

  const [updateVulnerability] = useUpdateVulnerabilityMutation();
  const [bulkUpdateVulnerabilities] = useBulkUpdateVulnerabilitiesMutation();
  const [triggerScan, { isLoading: isScanLoading }] = useTriggerScanMutation();

  // Initialize status filter based on tab
  useEffect(() => {
    let statusFilter: VulnerabilityStatus[] | undefined;

    switch (tabValue) {
      case 0: // All
        statusFilter = undefined;
        break;
      case 1: // Open
        statusFilter = [VulnerabilityStatus.OPEN];
        break;
      case 2: // In Progress
        statusFilter = [VulnerabilityStatus.IN_PROGRESS];
        break;
      case 3: // Remediated
        statusFilter = [VulnerabilityStatus.REMEDIATED];
        break;
      case 4: // Mitigated
        statusFilter = [VulnerabilityStatus.MITIGATED];
        break;
      case 5: // Accepted Risk
        statusFilter = [VulnerabilityStatus.ACCEPTED];
        break;
      case 6: // False Positive
        statusFilter = [VulnerabilityStatus.FALSE_POSITIVE];
        break;
      default:
        statusFilter = undefined;
    }

    setFilterParams((prev) => ({
      ...prev,
      status: statusFilter,
    }));
  }, [tabValue]);

  // Handle tab change
  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  // Handle search change
  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setFilterParams((prev) => ({
      ...prev,
      searchTerm: event.target.value,
    }));
  };

  // Handle filter update
  const handleFilterUpdate = (newFilters: VulnerabilityQueryParams) => {
    setFilterParams((prev) => ({
      ...prev,
      ...newFilters,
    }));
  };

  // Toggle filter panel
  const toggleFilterPanel = () => {
    setShowFilters(!showFilters);
  };

  // Handle vulnerability selection
  const handleSelectionChange = (newSelection: GridSelectionModel) => {
    setSelectedVulnerabilities(newSelection);
  };

  // Open vulnerability detail
  const handleOpenDetail = (vulnerability: Vulnerability) => {
    setCurrentVulnerability(vulnerability);
    setDetailOpen(true);
  };

  // Close vulnerability detail
  const handleCloseDetail = () => {
    setDetailOpen(false);
    setCurrentVulnerability(null);
  };

  // Handle bulk status update
  const handleBulkStatusUpdate = async (newStatus: VulnerabilityStatus) => {
    try {
      await bulkUpdateVulnerabilities({
        ids: selectedVulnerabilities.map((id) => id.toString()),
        updates: { status: newStatus },
      }).unwrap();

      setNotification({
        open: true,
        message: `Successfully updated ${selectedVulnerabilities.length} vulnerabilities to ${newStatus}`,
        severity: "success",
      });

      setSelectedVulnerabilities([]);
    } catch (error) {
      setNotification({
        open: true,
        message: `Failed to update vulnerabilities: ${error.message}`,
        severity: "error",
      });
    }
  };

  // Open scan dialog
  const handleOpenScanDialog = () => {
    setScanDialogOpen(true);
  };

  // Close scan dialog
  const handleCloseScanDialog = () => {
    setScanDialogOpen(false);
  };

  // Start vulnerability scan
  const handleStartScan = async (target: string, scanType: string) => {
    try {
      const result = await triggerScan({ target, scanType }).unwrap();

      setNotification({
        open: true,
        message: `Scan started successfully (ID: ${result.scanId})`,
        severity: "success",
      });

      setScanDialogOpen(false);
    } catch (error) {
      setNotification({
        open: true,
        message: `Failed to start scan: ${error.message}`,
        severity: "error",
      });
    }
  };

  // Close notification
  const handleCloseNotification = () => {
    setNotification((prev) => ({
      ...prev,
      open: false,
    }));
  };

  // Get severity color
  const getSeverityColor = (severity: VulnerabilitySeverity) => {
    switch (severity) {
      case VulnerabilitySeverity.CRITICAL:
        return theme.palette.error.dark;
      case VulnerabilitySeverity.HIGH:
        return theme.palette.error.main;
      case VulnerabilitySeverity.MEDIUM:
        return theme.palette.warning.main;
      case VulnerabilitySeverity.LOW:
        return theme.palette.info.main;
      case VulnerabilitySeverity.INFORMATIONAL:
        return theme.palette.grey[500];
      default:
        return theme.palette.grey[500];
    }
  };

  // Get severity icon
  const getSeverityIcon = (severity: VulnerabilitySeverity) => {
    switch (severity) {
      case VulnerabilitySeverity.CRITICAL:
        return <ErrorIcon color="error" />;
      case VulnerabilitySeverity.HIGH:
        return <ReportProblemIcon color="error" />;
      case VulnerabilitySeverity.MEDIUM:
        return <WarningIcon color="warning" />;
      case VulnerabilitySeverity.LOW:
        return <InfoIcon color="info" />;
      case VulnerabilitySeverity.INFORMATIONAL:
        return <InfoIcon color="action" />;
      default:
        return <InfoIcon color="action" />;
    }
  };

  // Get status color
  const getStatusColor = (status: VulnerabilityStatus) => {
    switch (status) {
      case VulnerabilityStatus.OPEN:
        return theme.palette.error.main;
      case VulnerabilityStatus.IN_PROGRESS:
        return theme.palette.warning.main;
      case VulnerabilityStatus.REMEDIATED:
        return theme.palette.success.main;
      case VulnerabilityStatus.MITIGATED:
        return theme.palette.info.main;
      case VulnerabilityStatus.ACCEPTED:
        return theme.palette.grey[600];
      case VulnerabilityStatus.FALSE_POSITIVE:
        return theme.palette.grey[500];
      default:
        return theme.palette.grey[500];
    }
  };

  // DataGrid columns definition
  const columns: GridColDef[] = [
    {
      field: "severity",
      headerName: "Severity",
      width: 100,
      renderCell: (params: GridRenderCellParams<VulnerabilitySeverity>) => (
        <Box sx={{ display: "flex", alignItems: "center" }}>
          <Tooltip title={params.value}>
            {getSeverityIcon(params.value)}
          </Tooltip>
        </Box>
      ),
      sortComparator: (v1, v2) => {
        const severityOrder = {
          [VulnerabilitySeverity.CRITICAL]: 5,
          [VulnerabilitySeverity.HIGH]: 4,
          [VulnerabilitySeverity.MEDIUM]: 3,
          [VulnerabilitySeverity.LOW]: 2,
          [VulnerabilitySeverity.INFORMATIONAL]: 1,
        };
        return severityOrder[v1] - severityOrder[v2];
      },
    },
    {
      field: "id",
      headerName: "ID",
      width: 100,
    },
    {
      field: "title",
      headerName: "Title",
      width: 300,
      flex: 1,
    },
    {
      field: "cve",
      headerName: "CVE",
      width: 130,
      renderCell: (params: GridRenderCellParams) =>
        params.value ? (
          <Chip
            label={params.value}
            size="small"
            color="primary"
            variant="outlined"
          />
        ) : null,
    },
    {
      field: "cvss",
      headerName: "CVSS",
      width: 100,
      renderCell: (params: GridRenderCellParams<number>) =>
        params.value ? (
          <Chip
            label={params.value.toFixed(1)}
            size="small"
            sx={{
              bgcolor:
                params.value >= 9.0
                  ? theme.palette.error.dark
                  : params.value >= 7.0
                  ? theme.palette.error.main
                  : params.value >= 4.0
                  ? theme.palette.warning.main
                  : params.value >= 1.0
                  ? theme.palette.info.main
                  : theme.palette.grey[500],
              color: "#fff",
            }}
          />
        ) : null,
    },
    {
      field: "status",
      headerName: "Status",
      width: 150,
      renderCell: (params: GridRenderCellParams<VulnerabilityStatus>) => (
        <Chip
          label={params.value ? params.value.replace("_", " ") : ""}
          size="small"
          sx={{
            bgcolor: getStatusColor(params.value),
            color: theme.palette.getContrastText(getStatusColor(params.value)),
          }}
        />
      ),
    },
    {
      field: "discoveredAt",
      headerName: "Discovered",
      width: 120,
      valueFormatter: (params) =>
        params.value ? format(new Date(params.value), "MMM d, yyyy") : "",
    },
    {
      field: "affectedSystems",
      headerName: "Affected Systems",
      width: 200,
      renderCell: (params: GridRenderCellParams<string[]>) => (
        <Box>
          {params.value && params.value.length > 0 ? (
            <>
              <Chip label={params.value[0]} size="small" sx={{ mr: 0.5 }} />
              {params.value.length > 1 && (
                <Chip
                  label={`+${params.value.length - 1}`}
                  size="small"
                  color="default"
                  variant="outlined"
                />
              )}
            </>
          ) : null}
        </Box>
      ),
    },
    {
      field: "exploitAvailable",
      headerName: "Exploit",
      width: 80,
      renderCell: (params: GridRenderCellParams<boolean>) =>
        params.value ? <Chip label="Yes" size="small" color="error" /> : null,
    },
    {
      field: "actions",
      headerName: "Actions",
      width: 120,
      sortable: false,
      renderCell: (params) => (
        <Box>
          <Tooltip title="View Details">
            <IconButton
              size="small"
              onClick={() => handleOpenDetail(params.row as Vulnerability)}
            >
              <VisibilityIcon fontSize="small" />
            </IconButton>
          </Tooltip>
          <Tooltip title="Edit">
            <IconButton size="small">
              <EditIcon fontSize="small" />
            </IconButton>
          </Tooltip>
        </Box>
      ),
    },
  ];

  return (
    <Box sx={{ height: "100%", display: "flex", flexDirection: "column" }}>
      {/* Header */}
      <Paper sx={{ p: 2, mb: 2 }}>
        <Grid container spacing={2} alignItems="center">
          <Grid item xs={12} md={8}>
            <Typography variant="h5" component="h1" gutterBottom>
              Vulnerability Management
            </Typography>
            <Typography variant="body2" color="textSecondary">
              Discover, track, and remediate security vulnerabilities across
              your infrastructure.
            </Typography>
          </Grid>

          <Grid
            item
            xs={12}
            md={4}
            sx={{ display: "flex", justifyContent: "flex-end", gap: 1 }}
          >
            <Button variant="contained" color="primary" startIcon={<AddIcon />}>
              Add Manually
            </Button>
            <Button
              variant="outlined"
              startIcon={<SecurityIcon />}
              onClick={handleOpenScanDialog}
            >
              New Scan
            </Button>
            <Button variant="outlined" startIcon={<UploadIcon />}>
              Import
            </Button>
          </Grid>
        </Grid>
      </Paper>

      {/* Statistics Overview */}
      {stats && <VulnerabilityStatisticsPanel stats={stats} />}

      {/* Main Content */}
      <Paper
        sx={{
          flexGrow: 1,
          display: "flex",
          flexDirection: "column",
          overflow: "hidden",
        }}
      >
        {/* Tabs and Filters */}
        <Box sx={{ borderBottom: 1, borderColor: "divider" }}>
          <Box
            sx={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              px: 2,
            }}
          >
            <Tabs
              value={tabValue}
              onChange={handleTabChange}
              aria-label="vulnerability tabs"
            >
              <Tab label="All" {...a11yProps(0)} />
              <Tab
                label={
                  <Box sx={{ display: "flex", alignItems: "center" }}>
                    Open
                    {stats?.byStatus?.OPEN && (
                      <Chip
                        label={stats.byStatus.OPEN}
                        size="small"
                        color="error"
                        sx={{ ml: 1 }}
                      />
                    )}
                  </Box>
                }
                {...a11yProps(1)}
              />
              <Tab
                label={
                  <Box sx={{ display: "flex", alignItems: "center" }}>
                    In Progress
                    {stats?.byStatus?.IN_PROGRESS && (
                      <Chip
                        label={stats.byStatus.IN_PROGRESS}
                        size="small"
                        color="warning"
                        sx={{ ml: 1 }}
                      />
                    )}
                  </Box>
                }
                {...a11yProps(2)}
              />
              <Tab
                label={
                  <Box sx={{ display: "flex", alignItems: "center" }}>
                    Remediated
                    {stats?.byStatus?.REMEDIATED && (
                      <Chip
                        label={stats.byStatus.REMEDIATED}
                        size="small"
                        color="success"
                        sx={{ ml: 1 }}
                      />
                    )}
                  </Box>
                }
                {...a11yProps(3)}
              />
              <Tab label="Mitigated" {...a11yProps(4)} />
              <Tab label="Accepted Risk" {...a11yProps(5)} />
              <Tab label="False Positive" {...a11yProps(6)} />
            </Tabs>

            <Box sx={{ display: "flex", alignItems: "center" }}>
              <TextField
                placeholder="Search vulnerabilities..."
                size="small"
                value={filterParams.searchTerm || ""}
                onChange={handleSearchChange}
                sx={{ mr: 1, width: 250 }}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <SearchIcon fontSize="small" />
                    </InputAdornment>
                  ),
                }}
              />

              <Tooltip title="Advanced Filters">
                <IconButton
                  onClick={toggleFilterPanel}
                  color={showFilters ? "primary" : "default"}
                >
                  <FilterIcon />
                </IconButton>
              </Tooltip>

              <Tooltip title="Refresh">
                <IconButton
                  onClick={() => refetch()}
                  disabled={isLoading || isFetching}
                >
                  {isFetching ? (
                    <CircularProgress size={24} />
                  ) : (
                    <RefreshIcon />
                  )}
                </IconButton>
              </Tooltip>
            </Box>
          </Box>
        </Box>

        {/* Filter Panel */}
        {showFilters && (
          <VulnerabilityFilterPanel
            filters={filterParams}
            onFilterChange={handleFilterUpdate}
          />
        )}

        {/* Bulk Actions */}
        {selectedVulnerabilities.length > 0 && (
          <Box
            sx={{
              p: 1,
              bgcolor:
                theme.palette.mode === "dark"
                  ? "rgba(255,255,255,0.05)"
                  : "rgba(0,0,0,0.03)",
            }}
          >
            <Box sx={{ display: "flex", alignItems: "center" }}>
              <Typography variant="body2" sx={{ mr: 2 }}>
                {selectedVulnerabilities.length} vulnerabilities selected
              </Typography>

              <Button
                size="small"
                variant="outlined"
                onClick={() =>
                  handleBulkStatusUpdate(VulnerabilityStatus.IN_PROGRESS)
                }
                startIcon={<WarningIcon />}
                sx={{ mr: 1 }}
              >
                Mark In Progress
              </Button>

              <Button
                size="small"
                variant="outlined"
                color="success"
                onClick={() =>
                  handleBulkStatusUpdate(VulnerabilityStatus.REMEDIATED)
                }
                startIcon={<CheckCircleIcon />}
                sx={{ mr: 1 }}
              >
                Mark Remediated
              </Button>

              <Button
                size="small"
                variant="outlined"
                color="warning"
                onClick={() =>
                  handleBulkStatusUpdate(VulnerabilityStatus.MITIGATED)
                }
                sx={{ mr: 1 }}
              >
                Mark Mitigated
              </Button>

              <Button
                size="small"
                variant="outlined"
                color="info"
                onClick={() =>
                  handleBulkStatusUpdate(VulnerabilityStatus.FALSE_POSITIVE)
                }
                sx={{ mr: 1 }}
              >
                Flag as False Positive
              </Button>

              <Button
                size="small"
                variant="outlined"
                color="secondary"
                onClick={() => setSelectedVulnerabilities([])}
              >
                Clear Selection
              </Button>
            </Box>
          </Box>
        )}

        {/* Tab Content */}
        <Box sx={{ flexGrow: 1, overflow: "auto" }}>
          <TabPanel value={tabValue} index={0}>
            <DataGrid
              rows={vulnerabilities}
              columns={columns}
              loading={isLoading || isFetching}
              checkboxSelection
              disableSelectionOnClick
              autoPageSize
              onSelectionModelChange={handleSelectionChange}
              selectionModel={selectedVulnerabilities}
              components={{
                Toolbar: GridToolbar,
              }}
              sx={{
                height: "100%",
                border: "none",
                "& .MuiDataGrid-row:hover": {
                  cursor: "pointer",
                },
              }}
            />
          </TabPanel>

          {/* Other tab panels (1-6) will have the same DataGrid with different filters */}
          {[1, 2, 3, 4, 5, 6].map((index) => (
            <TabPanel key={index} value={tabValue} index={index}>
              <DataGrid
                rows={vulnerabilities}
                columns={columns}
                loading={isLoading || isFetching}
                checkboxSelection
                disableSelectionOnClick
                autoPageSize
                onSelectionModelChange={handleSelectionChange}
                selectionModel={selectedVulnerabilities}
                components={{
                  Toolbar: GridToolbar,
                }}
                sx={{
                  height: "100%",
                  border: "none",
                  "& .MuiDataGrid-row:hover": {
                    cursor: "pointer",
                  },
                }}
              />
            </TabPanel>
          ))}
        </Box>
      </Paper>

      {/* Vulnerability Detail Dialog */}
      {currentVulnerability && (
        <VulnerabilityDetail
          open={detailOpen}
          vulnerability={currentVulnerability}
          onClose={handleCloseDetail}
          onUpdate={async (id, updates) => {
            try {
              await updateVulnerability({ id, updates }).unwrap();
              setNotification({
                open: true,
                message: "Vulnerability updated successfully",
                severity: "success",
              });
              handleCloseDetail();
            } catch (error) {
              setNotification({
                open: true,
                message: `Failed to update vulnerability: ${error.message}`,
                severity: "error",
              });
            }
          }}
        />
      )}

      {/* Scan Dialog */}
      <VulnerabilityScanDialog
        open={scanDialogOpen}
        onClose={handleCloseScanDialog}
        onStartScan={handleStartScan}
        isLoading={isScanLoading}
      />

      {/* Notification Snackbar */}
      <Snackbar
        open={notification.open}
        autoHideDuration={6000}
        onClose={handleCloseNotification}
        anchorOrigin={{ vertical: "bottom", horizontal: "right" }}
      >
        <Alert
          onClose={handleCloseNotification}
          severity={notification.severity}
          variant="filled"
        >
          {notification.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default VulnerabilityManagement;
