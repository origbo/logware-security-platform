/**
 * VulnerabilityWidget Component
 *
 * Dashboard widget for displaying vulnerability statistics and summary information.
 */
import React, { useState, useEffect } from "react";
import {
  Box,
  Card,
  CardContent,
  CardHeader,
  Divider,
  Typography,
  CircularProgress,
  Chip,
  Button,
  IconButton,
  Grid,
  useTheme,
} from "@mui/material";
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
  Legend,
} from "recharts";
import {
  BugReport as BugReportIcon,
  Refresh as RefreshIcon,
  ErrorOutline as ErrorIcon,
  Warning as WarningIcon,
  Info as InfoIcon,
  MoreVert as MoreVertIcon,
  Security as SecurityIcon,
} from "@mui/icons-material";
import { useGetVulnerabilityStatsQuery } from "../../../vulnerabilities/services/vulnerabilitiesApi";
import { VulnerabilitySeverity } from "../../../vulnerabilities/types/vulnerabilityTypes";
import { useNavigate } from "react-router-dom";

// Interface for component props
interface VulnerabilityWidgetProps {
  title?: string;
  height?: number | string;
}

const VulnerabilityWidget: React.FC<VulnerabilityWidgetProps> = ({
  title = "Vulnerability Summary",
  height = 320,
}) => {
  const theme = useTheme();
  const navigate = useNavigate();

  // Fetch vulnerability statistics
  const {
    data: stats,
    isLoading,
    isFetching,
    refetch,
  } = useGetVulnerabilityStatsQuery();

  // Prepare chart data
  const [chartData, setChartData] = useState<
    Array<{ name: string; value: number }>
  >([]);

  useEffect(() => {
    if (stats?.bySeverity) {
      const data = Object.entries(stats.bySeverity).map(([key, value]) => ({
        name: key,
        value,
      }));
      setChartData(data);
    }
  }, [stats]);

  // Color mapping for severity levels
  const severityColors = {
    [VulnerabilitySeverity.CRITICAL]: theme.palette.error.dark,
    [VulnerabilitySeverity.HIGH]: theme.palette.error.main,
    [VulnerabilitySeverity.MEDIUM]: theme.palette.warning.main,
    [VulnerabilitySeverity.LOW]: theme.palette.info.main,
    [VulnerabilitySeverity.INFORMATIONAL]: theme.palette.grey[500],
  };

  // Get icon for severity
  const getSeverityIcon = (severity: VulnerabilitySeverity) => {
    switch (severity) {
      case VulnerabilitySeverity.CRITICAL:
      case VulnerabilitySeverity.HIGH:
        return <ErrorIcon fontSize="small" />;
      case VulnerabilitySeverity.MEDIUM:
        return <WarningIcon fontSize="small" />;
      case VulnerabilitySeverity.LOW:
      case VulnerabilitySeverity.INFORMATIONAL:
        return <InfoIcon fontSize="small" />;
      default:
        return <InfoIcon fontSize="small" />;
    }
  };

  // Navigate to vulnerability management page
  const handleViewAllClick = () => {
    navigate("/vulnerabilities");
  };

  // Navigate to critical vulnerabilities
  const handleViewCriticalClick = () => {
    navigate("/vulnerabilities?severity=CRITICAL");
  };

  return (
    <Card sx={{ height: "100%", display: "flex", flexDirection: "column" }}>
      <CardHeader
        title={
          <Box sx={{ display: "flex", alignItems: "center" }}>
            <BugReportIcon sx={{ mr: 1 }} />
            <Typography variant="h6">{title}</Typography>
          </Box>
        }
        action={
          <Box>
            <IconButton
              size="small"
              onClick={() => refetch()}
              disabled={isLoading || isFetching}
              title="Refresh"
            >
              {isFetching ? <CircularProgress size={20} /> : <RefreshIcon />}
            </IconButton>
            <IconButton size="small" title="More options">
              <MoreVertIcon />
            </IconButton>
          </Box>
        }
      />

      <Divider />

      <CardContent
        sx={{ flexGrow: 1, display: "flex", flexDirection: "column" }}
      >
        {isLoading ? (
          <Box
            sx={{
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              height: "100%",
            }}
          >
            <CircularProgress />
          </Box>
        ) : stats ? (
          <>
            <Box sx={{ mb: 2 }}>
              <Grid container spacing={2}>
                <Grid item xs={6} sm={3}>
                  <Box sx={{ textAlign: "center" }}>
                    <Typography variant="body2" color="textSecondary">
                      Total
                    </Typography>
                    <Typography variant="h5">
                      {stats.totalOpen + (stats.totalRemediated || 0)}
                    </Typography>
                  </Box>
                </Grid>
                <Grid item xs={6} sm={3}>
                  <Box sx={{ textAlign: "center" }}>
                    <Typography variant="body2" color="textSecondary">
                      Open
                    </Typography>
                    <Typography variant="h5" color="error.main">
                      {stats.totalOpen}
                    </Typography>
                  </Box>
                </Grid>
                <Grid item xs={6} sm={3}>
                  <Box sx={{ textAlign: "center" }}>
                    <Typography variant="body2" color="textSecondary">
                      With Exploit
                    </Typography>
                    <Typography variant="h5" color="error.dark">
                      {stats.criticalWithExploit}
                    </Typography>
                  </Box>
                </Grid>
                <Grid item xs={6} sm={3}>
                  <Box sx={{ textAlign: "center" }}>
                    <Typography variant="body2" color="textSecondary">
                      Avg. Age
                    </Typography>
                    <Typography variant="h5">
                      {stats.averageRemediationTime || 0}d
                    </Typography>
                  </Box>
                </Grid>
              </Grid>
            </Box>

            <Box sx={{ flexGrow: 1, minHeight: 180 }}>
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={chartData}
                    dataKey="value"
                    nameKey="name"
                    cx="50%"
                    cy="50%"
                    outerRadius={70}
                    label={({ name, percent }) =>
                      `${name}: ${(percent * 100).toFixed(0)}%`
                    }
                  >
                    {chartData.map((entry, index) => (
                      <Cell
                        key={`cell-${index}`}
                        fill={
                          severityColors[entry.name] || theme.palette.grey[500]
                        }
                      />
                    ))}
                  </Pie>
                  <Tooltip
                    formatter={(value, name) => [value, name]}
                    labelFormatter={() => ""}
                  />
                </PieChart>
              </ResponsiveContainer>
            </Box>

            <Box sx={{ mt: 1 }}>
              <Typography variant="subtitle2" gutterBottom>
                Top Severity Issues
              </Typography>

              <Box sx={{ display: "flex", flexWrap: "wrap", gap: 0.5, mb: 2 }}>
                {Object.entries(stats.bySeverity || {})
                  .filter(
                    ([severity]) =>
                      severity === VulnerabilitySeverity.CRITICAL ||
                      severity === VulnerabilitySeverity.HIGH
                  )
                  .map(([severity, count]) => (
                    <Chip
                      key={severity}
                      label={`${severity}: ${count}`}
                      size="small"
                      icon={getSeverityIcon(severity as VulnerabilitySeverity)}
                      sx={{
                        bgcolor:
                          severityColors[severity as VulnerabilitySeverity],
                        color: "#fff",
                      }}
                    />
                  ))}
              </Box>
            </Box>
          </>
        ) : (
          <Box
            sx={{
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              height: "100%",
            }}
          >
            <Typography color="textSecondary">
              No vulnerability data available
            </Typography>
          </Box>
        )}
      </CardContent>

      <Divider />

      <Box sx={{ p: 1, display: "flex", justifyContent: "space-between" }}>
        <Button size="small" onClick={handleViewAllClick}>
          View All
        </Button>
        <Button
          size="small"
          color="error"
          startIcon={<SecurityIcon />}
          onClick={handleViewCriticalClick}
          disabled={
            !stats ||
            !stats.bySeverity ||
            !stats.bySeverity[VulnerabilitySeverity.CRITICAL]
          }
        >
          Critical Issues
        </Button>
      </Box>
    </Card>
  );
};

export default VulnerabilityWidget;
