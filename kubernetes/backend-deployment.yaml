apiVersion: apps/v1
kind: Deployment
metadata:
  name: logware-backend
  labels:
    app: logware
    tier: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: logware
      tier: backend
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: logware
        tier: backend
    spec:
      containers:
      - name: backend
        image: ${DOCKER_REGISTRY}/logware-backend:${VERSION}
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        resources:
          requests:
            cpu: "200m"
            memory: "256Mi"
          limits:
            cpu: "1000m"
            memory: "1Gi"
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
        envFrom:
        - configMapRef:
            name: backend-config
        - secretRef:
            name: backend-secrets
        volumeMounts:
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: logs
        emptyDir: {}
      imagePullSecrets:
      - name: registry-credentials
---
apiVersion: v1
kind: Service
metadata:
  name: logware-backend
  labels:
    app: logware
    tier: backend
spec:
  selector:
    app: logware
    tier: backend
  ports:
  - port: 8080
    targetPort: 8080
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: logware-backend-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - api.logware.example.com
    secretName: logware-api-tls
  rules:
  - host: api.logware.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: logware-backend
            port:
              number: 8080
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
data:
  NODE_ENV: "production"
  PORT: "8080"
  LOG_LEVEL: "info"
  MONGODB_URI: "mongodb://logware-mongodb:27017/logware"
  ELASTICSEARCH_HOSTS: "http://logware-elasticsearch:9200"
  REDIS_HOST: "logware-redis"
  REDIS_PORT: "6379"
  CORS_ORIGIN: "https://logware.example.com"
  JWT_EXPIRATION: "1h"
  REFRESH_TOKEN_EXPIRATION: "7d"
---
apiVersion: v1
kind: Secret
metadata:
  name: backend-secrets
type: Opaque
data:
  JWT_SECRET: ${BASE64_JWT_SECRET}
  REFRESH_TOKEN_SECRET: ${BASE64_REFRESH_TOKEN_SECRET}
  ENCRYPTION_KEY: ${BASE64_ENCRYPTION_KEY}
