---
# MongoDB Deployment
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: logware-mongodb
  labels:
    app: logware
    tier: database
    database: mongodb
spec:
  serviceName: logware-mongodb
  replicas: 1
  selector:
    matchLabels:
      app: logware
      tier: database
      database: mongodb
  template:
    metadata:
      labels:
        app: logware
        tier: database
        database: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:5.0
        ports:
        - containerPort: 27017
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "2000m"
            memory: "4Gi"
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongodb-secrets
              key: MONGO_ROOT_USERNAME
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secrets
              key: MONGO_ROOT_PASSWORD
        - name: MONGO_INITDB_DATABASE
          value: "logware"
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        readinessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 60
          periodSeconds: 30
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "standard"
      resources:
        requests:
          storage: 50Gi
---
# MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: logware-mongodb
  labels:
    app: logware
    tier: database
    database: mongodb
spec:
  selector:
    app: logware
    tier: database
    database: mongodb
  ports:
  - port: 27017
    targetPort: 27017
  clusterIP: None
---
# Elasticsearch Deployment
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: logware-elasticsearch
  labels:
    app: logware
    tier: database
    database: elasticsearch
spec:
  serviceName: logware-elasticsearch
  replicas: 1
  selector:
    matchLabels:
      app: logware
      tier: database
      database: elasticsearch
  template:
    metadata:
      labels:
        app: logware
        tier: database
        database: elasticsearch
    spec:
      containers:
      - name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:7.16.3
        ports:
        - containerPort: 9200
        - containerPort: 9300
        resources:
          requests:
            cpu: "1000m"
            memory: "2Gi"
          limits:
            cpu: "2000m"
            memory: "4Gi"
        env:
        - name: discovery.type
          value: "single-node"
        - name: ES_JAVA_OPTS
          value: "-Xms1g -Xmx1g"
        - name: xpack.security.enabled
          value: "false"
        volumeMounts:
        - name: elasticsearch-data
          mountPath: /usr/share/elasticsearch/data
        readinessProbe:
          httpGet:
            path: /_cluster/health
            port: 9200
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /_cluster/health
            port: 9200
          initialDelaySeconds: 60
          periodSeconds: 30
  volumeClaimTemplates:
  - metadata:
      name: elasticsearch-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "standard"
      resources:
        requests:
          storage: 100Gi
---
# Elasticsearch Service
apiVersion: v1
kind: Service
metadata:
  name: logware-elasticsearch
  labels:
    app: logware
    tier: database
    database: elasticsearch
spec:
  selector:
    app: logware
    tier: database
    database: elasticsearch
  ports:
  - port: 9200
    targetPort: 9200
    name: rest
  - port: 9300
    targetPort: 9300
    name: inter-node
  clusterIP: None
---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logware-redis
  labels:
    app: logware
    tier: database
    database: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logware
      tier: database
      database: redis
  template:
    metadata:
      labels:
        app: logware
        tier: database
        database: redis
    spec:
      containers:
      - name: redis
        image: redis:6.2-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            cpu: "100m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "1Gi"
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secrets
              key: REDIS_PASSWORD
        volumeMounts:
        - name: redis-data
          mountPath: /data
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 15
          periodSeconds: 15
      volumes:
      - name: redis-data
        emptyDir: {}
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: logware-redis
  labels:
    app: logware
    tier: database
    database: redis
spec:
  selector:
    app: logware
    tier: database
    database: redis
  ports:
  - port: 6379
    targetPort: 6379
  clusterIP: None
---
# Secrets
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secrets
type: Opaque
data:
  MONGO_ROOT_USERNAME: ${BASE64_MONGO_ROOT_USERNAME}
  MONGO_ROOT_PASSWORD: ${BASE64_MONGO_ROOT_PASSWORD}
---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secrets
type: Opaque
data:
  REDIS_PASSWORD: ${BASE64_REDIS_PASSWORD}
